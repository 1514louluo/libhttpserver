/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */



#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(std::vector< std::pair< std::string,std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(std::vector< std::pair< std::string,std::string > > *self,int i,std::vector< std::pair< std::string,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__getHeader(std::map< std::string,std::string > *self,std::string key){
		std::map<std::string,std::string >::iterator i = self->find(key);
		if (i != self->end())
			return i->second;
		else
			return "";    
	}

#include "HttpUtils.hpp"
#include "HttpRequest.hpp"
#include "HttpResponse.hpp"
#include "HttpEndpoint.hpp"
#include "Webserver.hpp"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "WebserverWrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1StringPair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1StringPair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1StringPair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_StringPair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_StringPair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_StringPair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_StringPair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1StringPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1ArgVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >();
  *(std::vector< std::pair< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1ArgVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg1 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< std::string,std::string > >::size_type)jarg1; 
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >(arg1);
  *(std::vector< std::pair< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_ArgVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_ArgVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_ArgVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = (std::vector< std::pair< std::string,std::string > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_ArgVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  result = (bool)((std::vector< std::pair< std::string,std::string > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_ArgVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_ArgVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,std::string > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::pair< std::string,std::string > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_ArgVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< std::string,std::string > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::pair< std::string,std::string > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_ArgVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< std::string,std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(arg1,arg2,(std::pair< std::string,std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1ArgVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1continue_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_continue;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1switching_1protocol_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_switching_protocol;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1processing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_processing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1ok_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_ok;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1created_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_created;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1accepted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_accepted;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1non_1authoritative_1information_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_non_authoritative_information;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1no_1content_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_no_content;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1reset_1content_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_reset_content;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1partial_1content_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_partial_content;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1multi_1status_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_multi_status;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1multiple_1choices_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_multiple_choices;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1moved_1permanently_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_moved_permanently;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1found_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_found;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1see_1other_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_see_other;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1not_1modified_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_not_modified;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1use_1proxy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_use_proxy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1switch_1proxy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_switch_proxy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1temporary_1redirect_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_temporary_redirect;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1bad_1request_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_bad_request;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1unauthorized_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_unauthorized;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1payment_1required_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_payment_required;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1forbidden_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_forbidden;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1not_1found_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_not_found;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1not_1allowed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_method_not_allowed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1not_1acceptable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_method_not_acceptable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1proxy_1authentication_1required_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_proxy_authentication_required;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1request_1timeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_request_timeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1conflict_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_conflict;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1gone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_gone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1length_1required_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_length_required;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1precondition_1failed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_precondition_failed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1request_1entity_1too_1large_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_request_entity_too_large;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1request_1uri_1too_1long_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_request_uri_too_long;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1unsupported_1media_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_unsupported_media_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1requested_1range_1not_1satisfiable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_requested_range_not_satisfiable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1expectation_1failed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_expectation_failed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1unprocessable_1entity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_unprocessable_entity;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1locked_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_locked;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1failed_1dependency_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_failed_dependency;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1unordered_1collection_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_unordered_collection;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1upgrade_1required_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_upgrade_required;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1retry_1with_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_retry_with;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1internal_1server_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_internal_server_error;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1not_1implemented_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_not_implemented;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1bad_1gateway_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_bad_gateway;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1service_1unavailable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_service_unavailable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1gateway_1timeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_gateway_timeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1version_1not_1supported_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_version_not_supported;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1variant_1also_1negotiated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_variant_also_negotiated;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1insufficient_1storage_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_insufficient_storage;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1bandwidth_1limit_1exceeded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_bandwidth_limit_exceeded;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1not_1extended_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)httpserver::http::HttpUtils::http_not_extended;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1accept_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_accept;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1accept_1charset_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_accept_charset;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1accept_1encoding_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_accept_encoding;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1accept_1language_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_accept_language;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1accept_1ranges_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_accept_ranges;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1age_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_age;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1allow_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_allow;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1authorization_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_authorization;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1cache_1control_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_cache_control;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1connection_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_connection;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1content_1encoding_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_content_encoding;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1content_1language_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_content_language;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1content_1length_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_content_length;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1content_1location_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_content_location;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1content_1md5_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_content_md5;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1content_1range_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_content_range;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1content_1type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_content_type;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1date_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_date;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1etag_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_etag;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1expect_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_expect;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1expires_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_expires;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1from_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_from;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1host_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_host;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1if_1match_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_if_match;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1if_1modified_1since_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_if_modified_since;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1if_1none_1match_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_if_none_match;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1if_1range_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_if_range;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1if_1unmodified_1since_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_if_unmodified_since;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1last_1modified_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_last_modified;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1location_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_location;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1max_1forwards_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_max_forwards;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1pragma_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_pragma;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1proxy_1authenticate_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_proxy_authenticate;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1proxy_1authentication_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_proxy_authentication;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1range_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_range;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1referer_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_referer;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1retry_1after_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_retry_after;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1server_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_server;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1te_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_te;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1trailer_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_trailer;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1transfer_1encoding_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_transfer_encoding;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1upgrade_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_upgrade;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1user_1agent_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_user_agent;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1vary_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_vary;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1via_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_via;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1warning_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_warning;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1header_1www_1authenticate_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_header_www_authenticate;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1version_11_10_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_version_1_0;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1version_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_version_1_1;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1connect_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_method_connect;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1delete_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_method_delete;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1head_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_method_head;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1get_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_method_get;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1options_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_method_options;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1post_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_method_post;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1put_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_method_put;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1method_1trace_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_method_trace;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1post_1encoding_1form_1urlencoded_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_post_encoding_form_urlencoded;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1http_1post_1encoding_1multipart_1formdata_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &httpserver::http::HttpUtils::http_post_encoding_multipart_formdata;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1tokenizeUrl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  char arg2 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = (char)jarg2; 
  result = httpserver::http::HttpUtils::tokenizeUrl((std::string const &)*arg1,arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1tokenizeUrl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = httpserver::http::HttpUtils::tokenizeUrl((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_HttpUtils_1standardizeUrl(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = httpserver::http::HttpUtils::standardizeUrl((std::string const &)*arg1);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1HttpUtils(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  httpserver::http::HttpUtils *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (httpserver::http::HttpUtils *)new httpserver::http::HttpUtils();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::http::HttpUtils **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1HttpUtils(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  httpserver::http::HttpUtils *arg1 = (httpserver::http::HttpUtils *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(httpserver::http::HttpUtils **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1HeaderComparator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  httpserver::http::HeaderComparator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (httpserver::http::HeaderComparator *)new httpserver::http::HeaderComparator();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::http::HeaderComparator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1HeaderComparator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  httpserver::http::HeaderComparator *arg1 = (httpserver::http::HeaderComparator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(httpserver::http::HeaderComparator **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1ArgComparator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  httpserver::http::ArgComparator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (httpserver::http::ArgComparator *)new httpserver::http::ArgComparator();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::http::ArgComparator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1ArgComparator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  httpserver::http::ArgComparator *arg1 = (httpserver::http::ArgComparator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(httpserver::http::ArgComparator **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_get_1ip_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  sockaddr *arg1 = (sockaddr *) 0 ;
  socklen_t arg2 ;
  socklen_t *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sockaddr **)&jarg1; 
  argp2 = *(socklen_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null socklen_t");
    return 0;
  }
  arg2 = *argp2; 
  result = httpserver::http::get_ip_str((sockaddr const *)arg1,arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_get_1ip_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  sockaddr *arg1 = (sockaddr *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sockaddr **)&jarg1; 
  result = httpserver::http::get_ip_str((sockaddr const *)arg1);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_libhttpserver_1javaJNI_get_1port(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  sockaddr *arg1 = (sockaddr *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sockaddr **)&jarg1; 
  result = (short)httpserver::http::get_port((sockaddr const *)arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_http_1unescape(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = httpserver::http::http_unescape(arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1SQMHeaders_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1SQMHeaders_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_SQMHeaders_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_SQMHeaders_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_SQMHeaders_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_SQMHeaders_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_SQMHeaders_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::string arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_SQMHeaders_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_SQMHeaders_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libhttpserver_1javaJNI_SQMHeaders_1getHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    (&arg2)->reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      (&arg2)->push_back((wchar_t)arg2_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = std_map_Sl_std_string_Sc_std_string_Sg__getHeader(arg1,arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1SQMHeaders(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1LoggingDelegate(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  httpserver::LoggingDelegate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (httpserver::LoggingDelegate *)new httpserver::LoggingDelegate();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::LoggingDelegate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1LoggingDelegate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  httpserver::LoggingDelegate *arg1 = (httpserver::LoggingDelegate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(httpserver::LoggingDelegate **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_LoggingDelegate_1log_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  httpserver::LoggingDelegate *arg1 = (httpserver::LoggingDelegate *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::LoggingDelegate **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      ((httpserver::LoggingDelegate const *)arg1)->log_access((std::string const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_LoggingDelegate_1log_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  httpserver::LoggingDelegate *arg1 = (httpserver::LoggingDelegate *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::LoggingDelegate **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      ((httpserver::LoggingDelegate const *)arg1)->log_error((std::string const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1RequestValidator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  httpserver::RequestValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (httpserver::RequestValidator *)new httpserver::RequestValidator();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::RequestValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1RequestValidator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  httpserver::RequestValidator *arg1 = (httpserver::RequestValidator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(httpserver::RequestValidator **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_RequestValidator_1validate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  httpserver::RequestValidator *arg1 = (httpserver::RequestValidator *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::RequestValidator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (bool)((httpserver::RequestValidator const *)arg1)->validate((std::string const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Unescaper(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  httpserver::Unescaper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (httpserver::Unescaper *)new httpserver::Unescaper();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Unescaper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1Unescaper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  httpserver::Unescaper *arg1 = (httpserver::Unescaper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(httpserver::Unescaper **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_Unescaper_1unescape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  httpserver::Unescaper *arg1 = (httpserver::Unescaper *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::Unescaper **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      ((httpserver::Unescaper const *)arg1)->unescape(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jboolean jarg17, jstring jarg18, jstring jarg19, jstring jarg20, jstring jarg21, jint jarg22, jstring jarg23, jint jarg24) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  std::string *arg18 = 0 ;
  std::string *arg19 = 0 ;
  std::string *arg20 = 0 ;
  std::string *arg21 = 0 ;
  httpserver::http::HttpUtils::CredType_T *arg22 = 0 ;
  std::string arg23 ;
  int arg24 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::http::HttpUtils::CredType_T temp22 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = jarg17 ? true : false; 
  if(!jarg18) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg18_pstr = jenv->GetStringChars(jarg18, 0);
  if (!arg18_pstr) return 0;
  jsize arg18_len = jenv->GetStringLength(jarg18);
  std::string arg18_str;
  if (arg18_len) {
    arg18_str.reserve(arg18_len);
    for (jsize i = 0; i < arg18_len; ++i) {
      arg18_str.push_back((wchar_t)arg18_pstr[i]);
    }
  }
  arg18 = &arg18_str;
  jenv->ReleaseStringChars(jarg18, arg18_pstr);
  
  if(!jarg19) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg19_pstr = jenv->GetStringChars(jarg19, 0);
  if (!arg19_pstr) return 0;
  jsize arg19_len = jenv->GetStringLength(jarg19);
  std::string arg19_str;
  if (arg19_len) {
    arg19_str.reserve(arg19_len);
    for (jsize i = 0; i < arg19_len; ++i) {
      arg19_str.push_back((wchar_t)arg19_pstr[i]);
    }
  }
  arg19 = &arg19_str;
  jenv->ReleaseStringChars(jarg19, arg19_pstr);
  
  if(!jarg20) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg20_pstr = jenv->GetStringChars(jarg20, 0);
  if (!arg20_pstr) return 0;
  jsize arg20_len = jenv->GetStringLength(jarg20);
  std::string arg20_str;
  if (arg20_len) {
    arg20_str.reserve(arg20_len);
    for (jsize i = 0; i < arg20_len; ++i) {
      arg20_str.push_back((wchar_t)arg20_pstr[i]);
    }
  }
  arg20 = &arg20_str;
  jenv->ReleaseStringChars(jarg20, arg20_pstr);
  
  if(!jarg21) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg21_pstr = jenv->GetStringChars(jarg21, 0);
  if (!arg21_pstr) return 0;
  jsize arg21_len = jenv->GetStringLength(jarg21);
  std::string arg21_str;
  if (arg21_len) {
    arg21_str.reserve(arg21_len);
    for (jsize i = 0; i < arg21_len; ++i) {
      arg21_str.push_back((wchar_t)arg21_pstr[i]);
    }
  }
  arg21 = &arg21_str;
  jenv->ReleaseStringChars(jarg21, arg21_pstr);
  
  temp22 = (httpserver::http::HttpUtils::CredType_T)jarg22; 
  arg22 = &temp22; 
  if(!jarg23) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg23_pstr = jenv->GetStringChars(jarg23, 0);
  if (!arg23_pstr) return 0;
  jsize arg23_len = jenv->GetStringLength(jarg23);
  if (arg23_len) {
    (&arg23)->reserve(arg23_len);
    for (jsize i = 0; i < arg23_len; ++i) {
      (&arg23)->push_back((wchar_t)arg23_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg23, arg23_pstr);
  
  arg24 = (int)jarg24; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,(std::string const &)*arg18,(std::string const &)*arg19,(std::string const &)*arg20,(std::string const &)*arg21,(httpserver::http::HttpUtils::CredType_T const &)*arg22,arg23,arg24);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jboolean jarg17, jstring jarg18, jstring jarg19, jstring jarg20, jstring jarg21, jint jarg22, jstring jarg23) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  std::string *arg18 = 0 ;
  std::string *arg19 = 0 ;
  std::string *arg20 = 0 ;
  std::string *arg21 = 0 ;
  httpserver::http::HttpUtils::CredType_T *arg22 = 0 ;
  std::string arg23 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::http::HttpUtils::CredType_T temp22 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = jarg17 ? true : false; 
  if(!jarg18) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg18_pstr = jenv->GetStringChars(jarg18, 0);
  if (!arg18_pstr) return 0;
  jsize arg18_len = jenv->GetStringLength(jarg18);
  std::string arg18_str;
  if (arg18_len) {
    arg18_str.reserve(arg18_len);
    for (jsize i = 0; i < arg18_len; ++i) {
      arg18_str.push_back((wchar_t)arg18_pstr[i]);
    }
  }
  arg18 = &arg18_str;
  jenv->ReleaseStringChars(jarg18, arg18_pstr);
  
  if(!jarg19) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg19_pstr = jenv->GetStringChars(jarg19, 0);
  if (!arg19_pstr) return 0;
  jsize arg19_len = jenv->GetStringLength(jarg19);
  std::string arg19_str;
  if (arg19_len) {
    arg19_str.reserve(arg19_len);
    for (jsize i = 0; i < arg19_len; ++i) {
      arg19_str.push_back((wchar_t)arg19_pstr[i]);
    }
  }
  arg19 = &arg19_str;
  jenv->ReleaseStringChars(jarg19, arg19_pstr);
  
  if(!jarg20) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg20_pstr = jenv->GetStringChars(jarg20, 0);
  if (!arg20_pstr) return 0;
  jsize arg20_len = jenv->GetStringLength(jarg20);
  std::string arg20_str;
  if (arg20_len) {
    arg20_str.reserve(arg20_len);
    for (jsize i = 0; i < arg20_len; ++i) {
      arg20_str.push_back((wchar_t)arg20_pstr[i]);
    }
  }
  arg20 = &arg20_str;
  jenv->ReleaseStringChars(jarg20, arg20_pstr);
  
  if(!jarg21) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg21_pstr = jenv->GetStringChars(jarg21, 0);
  if (!arg21_pstr) return 0;
  jsize arg21_len = jenv->GetStringLength(jarg21);
  std::string arg21_str;
  if (arg21_len) {
    arg21_str.reserve(arg21_len);
    for (jsize i = 0; i < arg21_len; ++i) {
      arg21_str.push_back((wchar_t)arg21_pstr[i]);
    }
  }
  arg21 = &arg21_str;
  jenv->ReleaseStringChars(jarg21, arg21_pstr);
  
  temp22 = (httpserver::http::HttpUtils::CredType_T)jarg22; 
  arg22 = &temp22; 
  if(!jarg23) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg23_pstr = jenv->GetStringChars(jarg23, 0);
  if (!arg23_pstr) return 0;
  jsize arg23_len = jenv->GetStringLength(jarg23);
  if (arg23_len) {
    (&arg23)->reserve(arg23_len);
    for (jsize i = 0; i < arg23_len; ++i) {
      (&arg23)->push_back((wchar_t)arg23_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg23, arg23_pstr);
  
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,(std::string const &)*arg18,(std::string const &)*arg19,(std::string const &)*arg20,(std::string const &)*arg21,(httpserver::http::HttpUtils::CredType_T const &)*arg22,arg23);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jboolean jarg17, jstring jarg18, jstring jarg19, jstring jarg20, jstring jarg21, jint jarg22) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  std::string *arg18 = 0 ;
  std::string *arg19 = 0 ;
  std::string *arg20 = 0 ;
  std::string *arg21 = 0 ;
  httpserver::http::HttpUtils::CredType_T *arg22 = 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::http::HttpUtils::CredType_T temp22 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = jarg17 ? true : false; 
  if(!jarg18) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg18_pstr = jenv->GetStringChars(jarg18, 0);
  if (!arg18_pstr) return 0;
  jsize arg18_len = jenv->GetStringLength(jarg18);
  std::string arg18_str;
  if (arg18_len) {
    arg18_str.reserve(arg18_len);
    for (jsize i = 0; i < arg18_len; ++i) {
      arg18_str.push_back((wchar_t)arg18_pstr[i]);
    }
  }
  arg18 = &arg18_str;
  jenv->ReleaseStringChars(jarg18, arg18_pstr);
  
  if(!jarg19) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg19_pstr = jenv->GetStringChars(jarg19, 0);
  if (!arg19_pstr) return 0;
  jsize arg19_len = jenv->GetStringLength(jarg19);
  std::string arg19_str;
  if (arg19_len) {
    arg19_str.reserve(arg19_len);
    for (jsize i = 0; i < arg19_len; ++i) {
      arg19_str.push_back((wchar_t)arg19_pstr[i]);
    }
  }
  arg19 = &arg19_str;
  jenv->ReleaseStringChars(jarg19, arg19_pstr);
  
  if(!jarg20) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg20_pstr = jenv->GetStringChars(jarg20, 0);
  if (!arg20_pstr) return 0;
  jsize arg20_len = jenv->GetStringLength(jarg20);
  std::string arg20_str;
  if (arg20_len) {
    arg20_str.reserve(arg20_len);
    for (jsize i = 0; i < arg20_len; ++i) {
      arg20_str.push_back((wchar_t)arg20_pstr[i]);
    }
  }
  arg20 = &arg20_str;
  jenv->ReleaseStringChars(jarg20, arg20_pstr);
  
  if(!jarg21) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg21_pstr = jenv->GetStringChars(jarg21, 0);
  if (!arg21_pstr) return 0;
  jsize arg21_len = jenv->GetStringLength(jarg21);
  std::string arg21_str;
  if (arg21_len) {
    arg21_str.reserve(arg21_len);
    for (jsize i = 0; i < arg21_len; ++i) {
      arg21_str.push_back((wchar_t)arg21_pstr[i]);
    }
  }
  arg21 = &arg21_str;
  jenv->ReleaseStringChars(jarg21, arg21_pstr);
  
  temp22 = (httpserver::http::HttpUtils::CredType_T)jarg22; 
  arg22 = &temp22; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,(std::string const &)*arg18,(std::string const &)*arg19,(std::string const &)*arg20,(std::string const &)*arg21,(httpserver::http::HttpUtils::CredType_T const &)*arg22);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jboolean jarg17, jstring jarg18, jstring jarg19, jstring jarg20, jstring jarg21) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  std::string *arg18 = 0 ;
  std::string *arg19 = 0 ;
  std::string *arg20 = 0 ;
  std::string *arg21 = 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = jarg17 ? true : false; 
  if(!jarg18) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg18_pstr = jenv->GetStringChars(jarg18, 0);
  if (!arg18_pstr) return 0;
  jsize arg18_len = jenv->GetStringLength(jarg18);
  std::string arg18_str;
  if (arg18_len) {
    arg18_str.reserve(arg18_len);
    for (jsize i = 0; i < arg18_len; ++i) {
      arg18_str.push_back((wchar_t)arg18_pstr[i]);
    }
  }
  arg18 = &arg18_str;
  jenv->ReleaseStringChars(jarg18, arg18_pstr);
  
  if(!jarg19) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg19_pstr = jenv->GetStringChars(jarg19, 0);
  if (!arg19_pstr) return 0;
  jsize arg19_len = jenv->GetStringLength(jarg19);
  std::string arg19_str;
  if (arg19_len) {
    arg19_str.reserve(arg19_len);
    for (jsize i = 0; i < arg19_len; ++i) {
      arg19_str.push_back((wchar_t)arg19_pstr[i]);
    }
  }
  arg19 = &arg19_str;
  jenv->ReleaseStringChars(jarg19, arg19_pstr);
  
  if(!jarg20) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg20_pstr = jenv->GetStringChars(jarg20, 0);
  if (!arg20_pstr) return 0;
  jsize arg20_len = jenv->GetStringLength(jarg20);
  std::string arg20_str;
  if (arg20_len) {
    arg20_str.reserve(arg20_len);
    for (jsize i = 0; i < arg20_len; ++i) {
      arg20_str.push_back((wchar_t)arg20_pstr[i]);
    }
  }
  arg20 = &arg20_str;
  jenv->ReleaseStringChars(jarg20, arg20_pstr);
  
  if(!jarg21) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg21_pstr = jenv->GetStringChars(jarg21, 0);
  if (!arg21_pstr) return 0;
  jsize arg21_len = jenv->GetStringLength(jarg21);
  std::string arg21_str;
  if (arg21_len) {
    arg21_str.reserve(arg21_len);
    for (jsize i = 0; i < arg21_len; ++i) {
      arg21_str.push_back((wchar_t)arg21_pstr[i]);
    }
  }
  arg21 = &arg21_str;
  jenv->ReleaseStringChars(jarg21, arg21_pstr);
  
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,(std::string const &)*arg18,(std::string const &)*arg19,(std::string const &)*arg20,(std::string const &)*arg21);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jboolean jarg17, jstring jarg18, jstring jarg19, jstring jarg20) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  std::string *arg18 = 0 ;
  std::string *arg19 = 0 ;
  std::string *arg20 = 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = jarg17 ? true : false; 
  if(!jarg18) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg18_pstr = jenv->GetStringChars(jarg18, 0);
  if (!arg18_pstr) return 0;
  jsize arg18_len = jenv->GetStringLength(jarg18);
  std::string arg18_str;
  if (arg18_len) {
    arg18_str.reserve(arg18_len);
    for (jsize i = 0; i < arg18_len; ++i) {
      arg18_str.push_back((wchar_t)arg18_pstr[i]);
    }
  }
  arg18 = &arg18_str;
  jenv->ReleaseStringChars(jarg18, arg18_pstr);
  
  if(!jarg19) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg19_pstr = jenv->GetStringChars(jarg19, 0);
  if (!arg19_pstr) return 0;
  jsize arg19_len = jenv->GetStringLength(jarg19);
  std::string arg19_str;
  if (arg19_len) {
    arg19_str.reserve(arg19_len);
    for (jsize i = 0; i < arg19_len; ++i) {
      arg19_str.push_back((wchar_t)arg19_pstr[i]);
    }
  }
  arg19 = &arg19_str;
  jenv->ReleaseStringChars(jarg19, arg19_pstr);
  
  if(!jarg20) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg20_pstr = jenv->GetStringChars(jarg20, 0);
  if (!arg20_pstr) return 0;
  jsize arg20_len = jenv->GetStringLength(jarg20);
  std::string arg20_str;
  if (arg20_len) {
    arg20_str.reserve(arg20_len);
    for (jsize i = 0; i < arg20_len; ++i) {
      arg20_str.push_back((wchar_t)arg20_pstr[i]);
    }
  }
  arg20 = &arg20_str;
  jenv->ReleaseStringChars(jarg20, arg20_pstr);
  
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,(std::string const &)*arg18,(std::string const &)*arg19,(std::string const &)*arg20);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jboolean jarg17, jstring jarg18, jstring jarg19) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  std::string *arg18 = 0 ;
  std::string *arg19 = 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = jarg17 ? true : false; 
  if(!jarg18) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg18_pstr = jenv->GetStringChars(jarg18, 0);
  if (!arg18_pstr) return 0;
  jsize arg18_len = jenv->GetStringLength(jarg18);
  std::string arg18_str;
  if (arg18_len) {
    arg18_str.reserve(arg18_len);
    for (jsize i = 0; i < arg18_len; ++i) {
      arg18_str.push_back((wchar_t)arg18_pstr[i]);
    }
  }
  arg18 = &arg18_str;
  jenv->ReleaseStringChars(jarg18, arg18_pstr);
  
  if(!jarg19) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg19_pstr = jenv->GetStringChars(jarg19, 0);
  if (!arg19_pstr) return 0;
  jsize arg19_len = jenv->GetStringLength(jarg19);
  std::string arg19_str;
  if (arg19_len) {
    arg19_str.reserve(arg19_len);
    for (jsize i = 0; i < arg19_len; ++i) {
      arg19_str.push_back((wchar_t)arg19_pstr[i]);
    }
  }
  arg19 = &arg19_str;
  jenv->ReleaseStringChars(jarg19, arg19_pstr);
  
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,(std::string const &)*arg18,(std::string const &)*arg19);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jboolean jarg17, jstring jarg18) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  std::string *arg18 = 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = jarg17 ? true : false; 
  if(!jarg18) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg18_pstr = jenv->GetStringChars(jarg18, 0);
  if (!arg18_pstr) return 0;
  jsize arg18_len = jenv->GetStringLength(jarg18);
  std::string arg18_str;
  if (arg18_len) {
    arg18_str.reserve(arg18_len);
    for (jsize i = 0; i < arg18_len; ++i) {
      arg18_str.push_back((wchar_t)arg18_pstr[i]);
    }
  }
  arg18 = &arg18_str;
  jenv->ReleaseStringChars(jarg18, arg18_pstr);
  
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,(std::string const &)*arg18);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jboolean jarg17) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = jarg17 ? true : false; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15,arg16);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14, jboolean jarg15) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14,arg15);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13, jboolean jarg14) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = jarg14 ? true : false; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13,arg14);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12, jint jarg13) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  int arg13 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12,arg13);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11, jint jarg12) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  int arg12 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  arg12 = (int)jarg12; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11,arg12);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  sockaddr *arg11 = (sockaddr *) 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  arg11 = *(sockaddr **)&jarg11; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10,(sockaddr const *)arg11);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::Unescaper *arg10 = (httpserver::Unescaper *) 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  arg10 = *(httpserver::Unescaper **)&jarg10; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9,(httpserver::Unescaper const *)arg10);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::RequestValidator *arg9 = (httpserver::RequestValidator *) 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  arg9 = *(httpserver::RequestValidator **)&jarg9; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8,(httpserver::RequestValidator const *)arg9);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::LoggingDelegate *arg8 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(httpserver::LoggingDelegate **)&jarg8; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7,(httpserver::LoggingDelegate const *)arg8);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5,arg6);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4,arg5);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3,arg4);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  int arg3 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2,arg3);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1,(httpserver::http::HttpUtils::StartMethod_T const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver(arg1);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_124(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1Webserver_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = 0 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "httpserver::CreateWebserver const & reference is null");
    return 0;
  } 
  {
    try {
      result = (httpserver::Webserver *)new httpserver::Webserver((httpserver::CreateWebserver const &)*arg1);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1Webserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  httpserver::Webserver *arg1 = (httpserver::Webserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(httpserver::Webserver **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_Webserver_1start_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  httpserver::Webserver *arg1 = (httpserver::Webserver *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::Webserver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (bool)(arg1)->start(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_Webserver_1start_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  httpserver::Webserver *arg1 = (httpserver::Webserver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::Webserver **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->start();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_Webserver_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  httpserver::Webserver *arg1 = (httpserver::Webserver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::Webserver **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->stop();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_Webserver_1isRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  httpserver::Webserver *arg1 = (httpserver::Webserver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::Webserver **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isRunning();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_Webserver_1registerResource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jboolean jarg4) {
  httpserver::Webserver *arg1 = (httpserver::Webserver *) 0 ;
  std::string *arg2 = 0 ;
  httpserver::HttpResource *arg3 = (httpserver::HttpResource *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::Webserver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(httpserver::HttpResource **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->registerResource((std::string const &)*arg2,arg3,arg4);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_Webserver_1registerResource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  httpserver::Webserver *arg1 = (httpserver::Webserver *) 0 ;
  std::string *arg2 = 0 ;
  httpserver::HttpResource *arg3 = (httpserver::HttpResource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::Webserver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(httpserver::HttpResource **)&jarg3; 
  {
    try {
      (arg1)->registerResource((std::string const &)*arg2,arg3);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_Webserver_1sweetKill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  httpserver::Webserver *arg1 = (httpserver::Webserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::Webserver **)&jarg1; 
  {
    try {
      (arg1)->sweetKill();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1CreateWebserver_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (httpserver::CreateWebserver *)new httpserver::CreateWebserver();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1CreateWebserver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (httpserver::CreateWebserver *)new httpserver::CreateWebserver(arg1);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  int arg2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->port(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1startMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::http::HttpUtils::StartMethod_T *arg2 = 0 ;
  httpserver::http::HttpUtils::StartMethod_T temp2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  temp2 = (httpserver::http::HttpUtils::StartMethod_T)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->startMethod((httpserver::http::HttpUtils::StartMethod_T const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1maxThreads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  int arg2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->maxThreads(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1maxConnections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  int arg2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->maxConnections(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1memoryLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  int arg2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->memoryLimit(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1connectionTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  int arg2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->connectionTimeout(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1perIPConnectionLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  int arg2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->perIPConnectionLimit(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1logDelegate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::LoggingDelegate *arg2 = (httpserver::LoggingDelegate *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = *(httpserver::LoggingDelegate **)&jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->logDelegate((httpserver::LoggingDelegate const *)arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1validator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::RequestValidator *arg2 = (httpserver::RequestValidator *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = *(httpserver::RequestValidator **)&jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->validator((httpserver::RequestValidator const *)arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1unescaper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::Unescaper *arg2 = (httpserver::Unescaper *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = *(httpserver::Unescaper **)&jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->unescaper((httpserver::Unescaper const *)arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1bindAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  sockaddr *arg2 = (sockaddr *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = *(sockaddr **)&jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->bindAddress((sockaddr const *)arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1bindSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  int arg2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->bindSocket(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1maxThreadStackSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  int arg2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->maxThreadStackSize(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1useSsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->useSsl();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1noSsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->noSsl();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1useIpv6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->useIpv6();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1noIpv6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->noIpv6();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1debug(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->debug();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1noDebug(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->noDebug();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1pedantic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->pedantic();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1noPedantic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->noPedantic();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1httpsMemKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  std::string *arg2 = 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->httpsMemKey((std::string const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1httpsMemCert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  std::string *arg2 = 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->httpsMemCert((std::string const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1httpsMemTrust(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  std::string *arg2 = 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->httpsMemTrust((std::string const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1httpsPriorities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  std::string *arg2 = 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->httpsPriorities((std::string const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1credType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  httpserver::http::HttpUtils::CredType_T *arg2 = 0 ;
  httpserver::http::HttpUtils::CredType_T temp2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  temp2 = (httpserver::http::HttpUtils::CredType_T)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->credType((httpserver::http::HttpUtils::CredType_T const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1digestAuthRandom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  std::string *arg2 = 0 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->digestAuthRandom((std::string const &)*arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_CreateWebserver_1nonceNcSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  int arg2 ;
  httpserver::CreateWebserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (httpserver::CreateWebserver *) &(arg1)->nonceNcSize(arg2);
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::CreateWebserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1CreateWebserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  httpserver::CreateWebserver *arg1 = (httpserver::CreateWebserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(httpserver::CreateWebserver **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1pp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  MHD_PostProcessor *arg2 = (MHD_PostProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  arg2 = *(MHD_PostProcessor **)&jarg2; 
  if (arg1) (arg1)->pp = arg2;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1pp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  MHD_PostProcessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  result = (MHD_PostProcessor *) ((arg1)->pp);
  *(MHD_PostProcessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1completeUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  if (arg1) (arg1)->completeUri = arg2;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1completeUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  result = (std::string *) ((arg1)->completeUri);
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1dhr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  httpserver::HttpRequest *arg2 = (httpserver::HttpRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  arg2 = *(httpserver::HttpRequest **)&jarg2; 
  if (arg1) (arg1)->dhr = arg2;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1dhr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  httpserver::HttpRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  result = (httpserver::HttpRequest *) ((arg1)->dhr);
  *(httpserver::HttpRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1ws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  httpserver::Webserver *arg2 = (httpserver::Webserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  arg2 = *(httpserver::Webserver **)&jarg2; 
  if (arg1) (arg1)->ws = arg2;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1ws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  httpserver::Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  result = (httpserver::Webserver *) ((arg1)->ws);
  *(httpserver::Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jboolean JNICALL Java_libhttpserver_1javaJNI_ModdedRequest_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  result = (bool) ((arg1)->second);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libhttpserver_1javaJNI_new_1ModdedRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  httpserver::ModdedRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (httpserver::ModdedRequest *)new httpserver::ModdedRequest();
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return 0; 
      };
    }
  }
  *(httpserver::ModdedRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libhttpserver_1javaJNI_delete_1ModdedRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  httpserver::ModdedRequest *arg1 = (httpserver::ModdedRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(httpserver::ModdedRequest **)&jarg1; 
  {
    try {
      delete arg1;
    } 
    
    
    
    
    
    
    
    
    catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Generic SWIG Exception"); return ; 
      };
    }
  }
}


#ifdef __cplusplus
}
#endif

