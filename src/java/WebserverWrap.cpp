/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_libjavawebserver_frameworkJNI = NULL;
    jmethodID director_methids[13];
  }
}

#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "Webserver.hpp"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "WebserverWrap.h"

SwigDirector_HttpResource::SwigDirector_HttpResource(JNIEnv *jenv) : HttpResource(), Swig::Director(jenv) {
}

SwigDirector_HttpResource::~SwigDirector_HttpResource() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


HttpResponse SwigDirector_HttpResource::render(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[0]) {
    return HttpResource::render(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[0], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_404() {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  HttpResponse *argp ;
  
  if (!swig_override[1]) {
    return HttpResource::render_404();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[1], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_500() {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  HttpResponse *argp ;
  
  if (!swig_override[2]) {
    return HttpResource::render_500();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[2], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_405() {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  HttpResponse *argp ;
  
  if (!swig_override[3]) {
    return HttpResource::render_405();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[3], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_GET(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[4]) {
    return HttpResource::render_GET(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[4], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_POST(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[5]) {
    return HttpResource::render_POST(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[5], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_PUT(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[6]) {
    return HttpResource::render_PUT(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[6], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_HEAD(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[7]) {
    return HttpResource::render_HEAD(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[7], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_DELETE(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[8]) {
    return HttpResource::render_DELETE(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[8], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_TRACE(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[9]) {
    return HttpResource::render_TRACE(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[9], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_OPTIONS(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[10]) {
    return HttpResource::render_OPTIONS(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[10], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::render_CONNECT(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[11]) {
    return HttpResource::render_CONNECT(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[11], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

HttpResponse SwigDirector_HttpResource::routeRequest(HttpRequest const &arg0) {
  HttpResponse c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  HttpResponse *argp ;
  
  if (!swig_override[12]) {
    return HttpResource::routeRequest(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(HttpRequest **)&jarg0 = (HttpRequest *) &arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_libjavawebserver_frameworkJNI, Swig::director_methids[12], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(HttpResponse **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type HttpResponse");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_HttpResource::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "render", "(LHttpRequest;)LHttpResponse;", NULL 
    },
    {
      "render_404", "()LHttpResponse;", NULL 
    },
    {
      "render_500", "()LHttpResponse;", NULL 
    },
    {
      "render_405", "()LHttpResponse;", NULL 
    },
    {
      "render_GET", "(LHttpRequest;)LHttpResponse;", NULL 
    },
    {
      "render_POST", "(LHttpRequest;)LHttpResponse;", NULL 
    },
    {
      "render_PUT", "(LHttpRequest;)LHttpResponse;", NULL 
    },
    {
      "render_HEAD", "(LHttpRequest;)LHttpResponse;", NULL 
    },
    {
      "render_DELETE", "(LHttpRequest;)LHttpResponse;", NULL 
    },
    {
      "render_TRACE", "(LHttpRequest;)LHttpResponse;", NULL 
    },
    {
      "render_OPTIONS", "(LHttpRequest;)LHttpResponse;", NULL 
    },
    {
      "render_CONNECT", "(LHttpRequest;)LHttpResponse;", NULL 
    },
    {
      "routeRequest", "(LHttpRequest;)LHttpResponse;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("HttpResource");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 13; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libjavawebserver_1frameworkJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1continue_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_continue;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1switching_1protocol_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_switching_protocol;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1processing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_processing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1ok_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_ok;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1created_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_created;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1accepted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_accepted;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1non_1authoritative_1information_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_non_authoritative_information;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1no_1content_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_no_content;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1reset_1content_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_reset_content;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1partial_1content_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_partial_content;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1multi_1status_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_multi_status;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1multiple_1choices_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_multiple_choices;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1moved_1permanently_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_moved_permanently;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1found_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_found;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1see_1other_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_see_other;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1not_1modified_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_not_modified;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1use_1proxy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_use_proxy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1switch_1proxy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_switch_proxy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1temporary_1redirect_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_temporary_redirect;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1bad_1request_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_bad_request;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1unauthorized_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_unauthorized;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1payment_1required_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_payment_required;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1forbidden_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_forbidden;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1not_1found_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_not_found;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1not_1allowed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_method_not_allowed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1not_1acceptable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_method_not_acceptable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1proxy_1authentication_1required_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_proxy_authentication_required;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1request_1timeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_request_timeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1conflict_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_conflict;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1gone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_gone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1length_1required_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_length_required;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1precondition_1failed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_precondition_failed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1request_1entity_1too_1large_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_request_entity_too_large;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1request_1uri_1too_1long_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_request_uri_too_long;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1unsupported_1media_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_unsupported_media_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1requested_1range_1not_1satisfiable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_requested_range_not_satisfiable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1expectation_1failed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_expectation_failed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1unprocessable_1entity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_unprocessable_entity;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1locked_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_locked;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1failed_1dependency_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_failed_dependency;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1unordered_1collection_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_unordered_collection;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1upgrade_1required_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_upgrade_required;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1retry_1with_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_retry_with;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1internal_1server_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_internal_server_error;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1not_1implemented_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_not_implemented;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1bad_1gateway_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_bad_gateway;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1service_1unavailable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_service_unavailable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1gateway_1timeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_gateway_timeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1version_1not_1supported_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_version_not_supported;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1variant_1also_1negotiated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_variant_also_negotiated;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1insufficient_1storage_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_insufficient_storage;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1bandwidth_1limit_1exceeded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_bandwidth_limit_exceeded;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1not_1extended_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HttpUtils::http_not_extended;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1accept_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_accept;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1accept_1charset_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_accept_charset;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1accept_1encoding_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_accept_encoding;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1accept_1language_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_accept_language;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1accept_1ranges_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_accept_ranges;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1age_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_age;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1allow_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_allow;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1authorization_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_authorization;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1cache_1control_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_cache_control;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1connection_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_connection;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1content_1encoding_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_content_encoding;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1content_1language_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_content_language;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1content_1length_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_content_length;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1content_1location_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_content_location;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1content_1md5_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_content_md5;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1content_1range_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_content_range;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1content_1type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_content_type;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1date_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_date;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1etag_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_etag;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1expect_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_expect;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1expires_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_expires;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1from_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_from;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1host_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_host;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1if_1match_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_if_match;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1if_1modified_1since_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_if_modified_since;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1if_1none_1match_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_if_none_match;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1if_1range_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_if_range;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1if_1unmodified_1since_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_if_unmodified_since;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1last_1modified_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_last_modified;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1location_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_location;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1max_1forwards_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_max_forwards;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1pragma_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_pragma;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1proxy_1authenticate_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_proxy_authenticate;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1proxy_1authentication_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_proxy_authentication;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1range_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_range;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1referer_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_referer;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1retry_1after_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_retry_after;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1server_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_server;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1te_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_te;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1trailer_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_trailer;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1transfer_1encoding_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_transfer_encoding;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1upgrade_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_upgrade;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1user_1agent_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_user_agent;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1vary_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_vary;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1via_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_via;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1warning_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_warning;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1header_1www_1authenticate_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_header_www_authenticate;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1version_11_10_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_version_1_0;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1version_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_version_1_1;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1connect_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_method_connect;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1delete_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_method_delete;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1head_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_method_head;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1get_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_method_get;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1options_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_method_options;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1post_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_method_post;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1put_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_method_put;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1method_1trace_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_method_trace;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1post_1encoding_1form_1urlencoded_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_post_encoding_form_urlencoded;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1http_1post_1encoding_1multipart_1formdata_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &HttpUtils::http_post_encoding_multipart_formdata;
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1tokenizeUrl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = HttpUtils::tokenizeUrl((std::string const &)*arg1,(char const *)arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1tokenizeUrl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = HttpUtils::tokenizeUrl((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpUtils_1standardizeUrl(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = HttpUtils::standardizeUrl((std::string const &)*arg1);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpUtils(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HttpUtils *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (HttpUtils *)new HttpUtils();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpUtils **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1HttpUtils(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HttpUtils *arg1 = (HttpUtils *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HttpUtils **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1ArgComparator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArgComparator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ArgComparator *)new ArgComparator();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(ArgComparator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1ArgComparator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArgComparator *arg1 = (ArgComparator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArgComparator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpEndpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  HttpEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  {
    try {
      result = (HttpEndpoint *)new HttpEndpoint(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpEndpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HttpEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (HttpEndpoint *)new HttpEndpoint();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpEndpoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  HttpEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (HttpEndpoint *)new HttpEndpoint((std::string const &)*arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpEndpoint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  HttpEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (HttpEndpoint *)new HttpEndpoint((std::string const &)*arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpEndpoint_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  HttpEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (HttpEndpoint *)new HttpEndpoint((std::string const &)*arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libjavawebserver_1frameworkJNI_HttpEndpoint_1match(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  HttpEndpoint *arg1 = (HttpEndpoint *) 0 ;
  HttpEndpoint *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpEndpoint **)&jarg1; 
  arg2 = *(HttpEndpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpEndpoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((HttpEndpoint const *)arg1)->match((HttpEndpoint const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpEndpoint_1get_1url_1pars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpEndpoint *arg1 = (HttpEndpoint *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpEndpoint **)&jarg1; 
  {
    try {
      result = ((HttpEndpoint const *)arg1)->get_url_pars();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpEndpoint_1get_1url_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpEndpoint *arg1 = (HttpEndpoint *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpEndpoint **)&jarg1; 
  {
    try {
      result = ((HttpEndpoint const *)arg1)->get_url_pieces();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpEndpoint_1get_1chunk_1positions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpEndpoint *arg1 = (HttpEndpoint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpEndpoint **)&jarg1; 
  {
    try {
      result = ((HttpEndpoint const *)arg1)->get_chunk_positions();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1HttpEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HttpEndpoint *arg1 = (HttpEndpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HttpEndpoint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpRequest_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HttpRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (HttpRequest *)new HttpRequest();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpRequest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpRequest *arg1 = 0 ;
  HttpRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (HttpRequest *)new HttpRequest((HttpRequest const &)*arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  {
    try {
      result = ((HttpRequest const *)arg1)->getUser();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getPass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  {
    try {
      result = ((HttpRequest const *)arg1)->getPass();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  {
    try {
      result = ((HttpRequest const *)arg1)->getPath();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getPathPieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  {
    try {
      result = ((HttpRequest const *)arg1)->getPathPieces();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  {
    try {
      result = ((HttpRequest const *)arg1)->getMethod();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getHeaders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  SwigValueWrapper< std::map< std::string,std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  {
    try {
      result = ((HttpRequest const *)arg1)->getHeaders();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  SwigValueWrapper< std::map< std::string,std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  {
    try {
      result = ((HttpRequest const *)arg1)->getArgs();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = ((HttpRequest const *)arg1)->getHeader((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = ((HttpRequest const *)arg1)->getArg((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1getContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  {
    try {
      result = ((HttpRequest const *)arg1)->getContent();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1setHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::string arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      (arg1)->setHeader((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1setArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::string arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      (arg1)->setArg((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1setContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->setContent((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1growContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->growContent((std::string const &)*arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1setPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->setPath((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1setMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->setMethod((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1removeHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->removeHeader((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1setHeaders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setHeaders((std::map< std::string,std::string > const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1setArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setArgs((std::map< std::string,std::string > const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1setUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->setUser((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpRequest_1setPass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->setPass((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1HttpRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HttpRequest *arg1 = (HttpRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HttpRequest **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HttpResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (HttpResponse *)new HttpResponse();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  HttpResponse::ResponseType_T *arg3 = 0 ;
  HttpResponse::ResponseType_T temp3 ;
  HttpResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = (int)jarg2; 
  temp3 = (HttpResponse::ResponseType_T)jarg3; 
  arg3 = &temp3; 
  {
    try {
      result = (HttpResponse *)new HttpResponse((std::string const &)*arg1,arg2,(HttpResponse::ResponseType_T const &)*arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  HttpResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::string arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = (int)jarg2; 
  {
    try {
      result = (HttpResponse *)new HttpResponse((std::string const &)*arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpResponse_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpResponse *arg1 = 0 ;
  HttpResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (HttpResponse *)new HttpResponse((HttpResponse const &)*arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1getContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  {
    try {
      result = (arg1)->getContent();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1setContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->setContent((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1getHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (arg1)->getHeader((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1getFooter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (arg1)->getFooter((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1setHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::string arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      (arg1)->setHeader((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1setFooter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::string arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      (arg1)->setFooter((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1setContentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->setContentType((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1removeHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->removeHeader((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1getHeaders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  SwigValueWrapper< std::map< std::string,std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  {
    try {
      result = (arg1)->getHeaders();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1getFooters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  SwigValueWrapper< std::map< std::string,std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  {
    try {
      result = (arg1)->getFooters();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1setHeaders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setHeaders((std::map< std::string,std::string > const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1setFooters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setFooters((std::map< std::string,std::string > const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1setResponseCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setResponseCode(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_libjavawebserver_1frameworkJNI_HttpResponse_1getResponseCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResponse **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getResponseCode();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1HttpResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HttpResponse *arg1 = (HttpResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HttpResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1HttpResource(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HttpResource *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (HttpResource *)new SwigDirector_HttpResource(jenv);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResource **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1HttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HttpResource *arg1 = (HttpResource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HttpResource **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->render((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1renderSwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::render((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1404(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  {
    try {
      result = (arg1)->render_404();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1404SwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  {
    try {
      result = (arg1)->HttpResource::render_404();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1500(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  {
    try {
      result = (arg1)->render_500();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1500SwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  {
    try {
      result = (arg1)->HttpResource::render_500();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1405(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  {
    try {
      result = (arg1)->render_405();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1405SwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  {
    try {
      result = (arg1)->HttpResource::render_405();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1GET(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->render_GET((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1GETSwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::render_GET((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1POST(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->render_POST((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1POSTSwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::render_POST((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1PUT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->render_PUT((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1PUTSwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::render_PUT((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1HEAD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->render_HEAD((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1HEADSwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::render_HEAD((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1DELETE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->render_DELETE((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1DELETESwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::render_DELETE((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1TRACE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->render_TRACE((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1TRACESwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::render_TRACE((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1OPTIONS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->render_OPTIONS((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1OPTIONSSwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::render_OPTIONS((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1CONNECT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->render_CONNECT((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1render_1CONNECTSwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::render_CONNECT((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1routeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->routeRequest((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1routeRequestSwigExplicitHttpResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  HttpRequest *arg2 = 0 ;
  HttpResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HttpResource **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "HttpRequest const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->HttpResource::routeRequest((HttpRequest const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(HttpResponse **)&jresult = new HttpResponse((const HttpResponse &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1setAllowing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  HttpResource *arg1 = (HttpResource *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setAllowing((std::string const &)*arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1allowAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HttpResource *arg1 = (HttpResource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  {
    try {
      (arg1)->allowAll();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1disallowAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HttpResource *arg1 = (HttpResource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  {
    try {
      (arg1)->disallowAll();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1isAllowed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  HttpResource *arg1 = (HttpResource *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HttpResource **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (bool)(arg1)->isAllowed((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  HttpResource *obj = *((HttpResource **)&objarg);
  (void)jcls;
  SwigDirector_HttpResource *director = dynamic_cast<SwigDirector_HttpResource *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_HttpResource_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  HttpResource *obj = *((HttpResource **)&objarg);
  SwigDirector_HttpResource *director = dynamic_cast<SwigDirector_HttpResource *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1LoggingDelegate(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LoggingDelegate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (LoggingDelegate *)new LoggingDelegate();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(LoggingDelegate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1LoggingDelegate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LoggingDelegate *arg1 = (LoggingDelegate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LoggingDelegate **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_LoggingDelegate_1log_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LoggingDelegate *arg1 = (LoggingDelegate *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LoggingDelegate **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      ((LoggingDelegate const *)arg1)->log_access((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_LoggingDelegate_1log_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LoggingDelegate *arg1 = (LoggingDelegate *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LoggingDelegate **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      ((LoggingDelegate const *)arg1)->log_error((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1RequestValidator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RequestValidator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (RequestValidator *)new RequestValidator();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(RequestValidator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1RequestValidator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RequestValidator *arg1 = (RequestValidator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestValidator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_libjavawebserver_1frameworkJNI_RequestValidator_1validate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  RequestValidator *arg1 = (RequestValidator *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestValidator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (bool)((RequestValidator const *)arg1)->validate((std::string const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Unescaper(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Unescaper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Unescaper *)new Unescaper();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Unescaper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1Unescaper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Unescaper *arg1 = (Unescaper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Unescaper **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_Unescaper_1unescape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Unescaper *arg1 = (Unescaper *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Unescaper **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      ((Unescaper const *)arg1)->unescape(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jstring jarg12, jstring jarg13, jstring jarg14, jint jarg15, jstring jarg16, jint jarg17) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Unescaper *arg9 = (Unescaper *) 0 ;
  int arg10 ;
  std::string *arg11 = 0 ;
  std::string *arg12 = 0 ;
  std::string *arg13 = 0 ;
  std::string *arg14 = 0 ;
  HttpUtils::CredType_T arg15 ;
  std::string arg16 ;
  int arg17 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  arg9 = *(Unescaper **)&jarg9; 
  arg10 = (int)jarg10; 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg11_pstr = jenv->GetStringChars(jarg11, 0);
  if (!arg11_pstr) return 0;
  jsize arg11_len = jenv->GetStringLength(jarg11);
  std::string arg11_str;
  if (arg11_len) {
    arg11_str.reserve(arg11_len);
    for (jsize i = 0; i < arg11_len; ++i) {
      arg11_str.push_back((wchar_t)arg11_pstr[i]);
    }
  }
  arg11 = &arg11_str;
  jenv->ReleaseStringChars(jarg11, arg11_pstr);
  
  if(!jarg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg12_pstr = jenv->GetStringChars(jarg12, 0);
  if (!arg12_pstr) return 0;
  jsize arg12_len = jenv->GetStringLength(jarg12);
  std::string arg12_str;
  if (arg12_len) {
    arg12_str.reserve(arg12_len);
    for (jsize i = 0; i < arg12_len; ++i) {
      arg12_str.push_back((wchar_t)arg12_pstr[i]);
    }
  }
  arg12 = &arg12_str;
  jenv->ReleaseStringChars(jarg12, arg12_pstr);
  
  if(!jarg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg13_pstr = jenv->GetStringChars(jarg13, 0);
  if (!arg13_pstr) return 0;
  jsize arg13_len = jenv->GetStringLength(jarg13);
  std::string arg13_str;
  if (arg13_len) {
    arg13_str.reserve(arg13_len);
    for (jsize i = 0; i < arg13_len; ++i) {
      arg13_str.push_back((wchar_t)arg13_pstr[i]);
    }
  }
  arg13 = &arg13_str;
  jenv->ReleaseStringChars(jarg13, arg13_pstr);
  
  if(!jarg14) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg14_pstr = jenv->GetStringChars(jarg14, 0);
  if (!arg14_pstr) return 0;
  jsize arg14_len = jenv->GetStringLength(jarg14);
  std::string arg14_str;
  if (arg14_len) {
    arg14_str.reserve(arg14_len);
    for (jsize i = 0; i < arg14_len; ++i) {
      arg14_str.push_back((wchar_t)arg14_pstr[i]);
    }
  }
  arg14 = &arg14_str;
  jenv->ReleaseStringChars(jarg14, arg14_pstr);
  
  arg15 = (HttpUtils::CredType_T)jarg15; 
  if(!jarg16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg16_pstr = jenv->GetStringChars(jarg16, 0);
  if (!arg16_pstr) return 0;
  jsize arg16_len = jenv->GetStringLength(jarg16);
  if (arg16_len) {
    (&arg16)->reserve(arg16_len);
    for (jsize i = 0; i < arg16_len; ++i) {
      (&arg16)->push_back((wchar_t)arg16_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg16, arg16_pstr);
  
  arg17 = (int)jarg17; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8,(Unescaper const *)arg9,arg10,(std::string const &)*arg11,(std::string const &)*arg12,(std::string const &)*arg13,(std::string const &)*arg14,arg15,arg16,arg17);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jstring jarg12, jstring jarg13, jstring jarg14, jint jarg15, jstring jarg16) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Unescaper *arg9 = (Unescaper *) 0 ;
  int arg10 ;
  std::string *arg11 = 0 ;
  std::string *arg12 = 0 ;
  std::string *arg13 = 0 ;
  std::string *arg14 = 0 ;
  HttpUtils::CredType_T arg15 ;
  std::string arg16 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  arg9 = *(Unescaper **)&jarg9; 
  arg10 = (int)jarg10; 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg11_pstr = jenv->GetStringChars(jarg11, 0);
  if (!arg11_pstr) return 0;
  jsize arg11_len = jenv->GetStringLength(jarg11);
  std::string arg11_str;
  if (arg11_len) {
    arg11_str.reserve(arg11_len);
    for (jsize i = 0; i < arg11_len; ++i) {
      arg11_str.push_back((wchar_t)arg11_pstr[i]);
    }
  }
  arg11 = &arg11_str;
  jenv->ReleaseStringChars(jarg11, arg11_pstr);
  
  if(!jarg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg12_pstr = jenv->GetStringChars(jarg12, 0);
  if (!arg12_pstr) return 0;
  jsize arg12_len = jenv->GetStringLength(jarg12);
  std::string arg12_str;
  if (arg12_len) {
    arg12_str.reserve(arg12_len);
    for (jsize i = 0; i < arg12_len; ++i) {
      arg12_str.push_back((wchar_t)arg12_pstr[i]);
    }
  }
  arg12 = &arg12_str;
  jenv->ReleaseStringChars(jarg12, arg12_pstr);
  
  if(!jarg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg13_pstr = jenv->GetStringChars(jarg13, 0);
  if (!arg13_pstr) return 0;
  jsize arg13_len = jenv->GetStringLength(jarg13);
  std::string arg13_str;
  if (arg13_len) {
    arg13_str.reserve(arg13_len);
    for (jsize i = 0; i < arg13_len; ++i) {
      arg13_str.push_back((wchar_t)arg13_pstr[i]);
    }
  }
  arg13 = &arg13_str;
  jenv->ReleaseStringChars(jarg13, arg13_pstr);
  
  if(!jarg14) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg14_pstr = jenv->GetStringChars(jarg14, 0);
  if (!arg14_pstr) return 0;
  jsize arg14_len = jenv->GetStringLength(jarg14);
  std::string arg14_str;
  if (arg14_len) {
    arg14_str.reserve(arg14_len);
    for (jsize i = 0; i < arg14_len; ++i) {
      arg14_str.push_back((wchar_t)arg14_pstr[i]);
    }
  }
  arg14 = &arg14_str;
  jenv->ReleaseStringChars(jarg14, arg14_pstr);
  
  arg15 = (HttpUtils::CredType_T)jarg15; 
  if(!jarg16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg16_pstr = jenv->GetStringChars(jarg16, 0);
  if (!arg16_pstr) return 0;
  jsize arg16_len = jenv->GetStringLength(jarg16);
  if (arg16_len) {
    (&arg16)->reserve(arg16_len);
    for (jsize i = 0; i < arg16_len; ++i) {
      (&arg16)->push_back((wchar_t)arg16_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg16, arg16_pstr);
  
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8,(Unescaper const *)arg9,arg10,(std::string const &)*arg11,(std::string const &)*arg12,(std::string const &)*arg13,(std::string const &)*arg14,arg15,arg16);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jstring jarg12, jstring jarg13, jstring jarg14, jint jarg15) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Unescaper *arg9 = (Unescaper *) 0 ;
  int arg10 ;
  std::string *arg11 = 0 ;
  std::string *arg12 = 0 ;
  std::string *arg13 = 0 ;
  std::string *arg14 = 0 ;
  HttpUtils::CredType_T arg15 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  arg9 = *(Unescaper **)&jarg9; 
  arg10 = (int)jarg10; 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg11_pstr = jenv->GetStringChars(jarg11, 0);
  if (!arg11_pstr) return 0;
  jsize arg11_len = jenv->GetStringLength(jarg11);
  std::string arg11_str;
  if (arg11_len) {
    arg11_str.reserve(arg11_len);
    for (jsize i = 0; i < arg11_len; ++i) {
      arg11_str.push_back((wchar_t)arg11_pstr[i]);
    }
  }
  arg11 = &arg11_str;
  jenv->ReleaseStringChars(jarg11, arg11_pstr);
  
  if(!jarg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg12_pstr = jenv->GetStringChars(jarg12, 0);
  if (!arg12_pstr) return 0;
  jsize arg12_len = jenv->GetStringLength(jarg12);
  std::string arg12_str;
  if (arg12_len) {
    arg12_str.reserve(arg12_len);
    for (jsize i = 0; i < arg12_len; ++i) {
      arg12_str.push_back((wchar_t)arg12_pstr[i]);
    }
  }
  arg12 = &arg12_str;
  jenv->ReleaseStringChars(jarg12, arg12_pstr);
  
  if(!jarg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg13_pstr = jenv->GetStringChars(jarg13, 0);
  if (!arg13_pstr) return 0;
  jsize arg13_len = jenv->GetStringLength(jarg13);
  std::string arg13_str;
  if (arg13_len) {
    arg13_str.reserve(arg13_len);
    for (jsize i = 0; i < arg13_len; ++i) {
      arg13_str.push_back((wchar_t)arg13_pstr[i]);
    }
  }
  arg13 = &arg13_str;
  jenv->ReleaseStringChars(jarg13, arg13_pstr);
  
  if(!jarg14) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg14_pstr = jenv->GetStringChars(jarg14, 0);
  if (!arg14_pstr) return 0;
  jsize arg14_len = jenv->GetStringLength(jarg14);
  std::string arg14_str;
  if (arg14_len) {
    arg14_str.reserve(arg14_len);
    for (jsize i = 0; i < arg14_len; ++i) {
      arg14_str.push_back((wchar_t)arg14_pstr[i]);
    }
  }
  arg14 = &arg14_str;
  jenv->ReleaseStringChars(jarg14, arg14_pstr);
  
  arg15 = (HttpUtils::CredType_T)jarg15; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8,(Unescaper const *)arg9,arg10,(std::string const &)*arg11,(std::string const &)*arg12,(std::string const &)*arg13,(std::string const &)*arg14,arg15);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jstring jarg12, jstring jarg13, jstring jarg14) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Unescaper *arg9 = (Unescaper *) 0 ;
  int arg10 ;
  std::string *arg11 = 0 ;
  std::string *arg12 = 0 ;
  std::string *arg13 = 0 ;
  std::string *arg14 = 0 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  arg9 = *(Unescaper **)&jarg9; 
  arg10 = (int)jarg10; 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg11_pstr = jenv->GetStringChars(jarg11, 0);
  if (!arg11_pstr) return 0;
  jsize arg11_len = jenv->GetStringLength(jarg11);
  std::string arg11_str;
  if (arg11_len) {
    arg11_str.reserve(arg11_len);
    for (jsize i = 0; i < arg11_len; ++i) {
      arg11_str.push_back((wchar_t)arg11_pstr[i]);
    }
  }
  arg11 = &arg11_str;
  jenv->ReleaseStringChars(jarg11, arg11_pstr);
  
  if(!jarg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg12_pstr = jenv->GetStringChars(jarg12, 0);
  if (!arg12_pstr) return 0;
  jsize arg12_len = jenv->GetStringLength(jarg12);
  std::string arg12_str;
  if (arg12_len) {
    arg12_str.reserve(arg12_len);
    for (jsize i = 0; i < arg12_len; ++i) {
      arg12_str.push_back((wchar_t)arg12_pstr[i]);
    }
  }
  arg12 = &arg12_str;
  jenv->ReleaseStringChars(jarg12, arg12_pstr);
  
  if(!jarg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg13_pstr = jenv->GetStringChars(jarg13, 0);
  if (!arg13_pstr) return 0;
  jsize arg13_len = jenv->GetStringLength(jarg13);
  std::string arg13_str;
  if (arg13_len) {
    arg13_str.reserve(arg13_len);
    for (jsize i = 0; i < arg13_len; ++i) {
      arg13_str.push_back((wchar_t)arg13_pstr[i]);
    }
  }
  arg13 = &arg13_str;
  jenv->ReleaseStringChars(jarg13, arg13_pstr);
  
  if(!jarg14) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg14_pstr = jenv->GetStringChars(jarg14, 0);
  if (!arg14_pstr) return 0;
  jsize arg14_len = jenv->GetStringLength(jarg14);
  std::string arg14_str;
  if (arg14_len) {
    arg14_str.reserve(arg14_len);
    for (jsize i = 0; i < arg14_len; ++i) {
      arg14_str.push_back((wchar_t)arg14_pstr[i]);
    }
  }
  arg14 = &arg14_str;
  jenv->ReleaseStringChars(jarg14, arg14_pstr);
  
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8,(Unescaper const *)arg9,arg10,(std::string const &)*arg11,(std::string const &)*arg12,(std::string const &)*arg13,(std::string const &)*arg14);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jstring jarg12, jstring jarg13) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Unescaper *arg9 = (Unescaper *) 0 ;
  int arg10 ;
  std::string *arg11 = 0 ;
  std::string *arg12 = 0 ;
  std::string *arg13 = 0 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  arg9 = *(Unescaper **)&jarg9; 
  arg10 = (int)jarg10; 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg11_pstr = jenv->GetStringChars(jarg11, 0);
  if (!arg11_pstr) return 0;
  jsize arg11_len = jenv->GetStringLength(jarg11);
  std::string arg11_str;
  if (arg11_len) {
    arg11_str.reserve(arg11_len);
    for (jsize i = 0; i < arg11_len; ++i) {
      arg11_str.push_back((wchar_t)arg11_pstr[i]);
    }
  }
  arg11 = &arg11_str;
  jenv->ReleaseStringChars(jarg11, arg11_pstr);
  
  if(!jarg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg12_pstr = jenv->GetStringChars(jarg12, 0);
  if (!arg12_pstr) return 0;
  jsize arg12_len = jenv->GetStringLength(jarg12);
  std::string arg12_str;
  if (arg12_len) {
    arg12_str.reserve(arg12_len);
    for (jsize i = 0; i < arg12_len; ++i) {
      arg12_str.push_back((wchar_t)arg12_pstr[i]);
    }
  }
  arg12 = &arg12_str;
  jenv->ReleaseStringChars(jarg12, arg12_pstr);
  
  if(!jarg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg13_pstr = jenv->GetStringChars(jarg13, 0);
  if (!arg13_pstr) return 0;
  jsize arg13_len = jenv->GetStringLength(jarg13);
  std::string arg13_str;
  if (arg13_len) {
    arg13_str.reserve(arg13_len);
    for (jsize i = 0; i < arg13_len; ++i) {
      arg13_str.push_back((wchar_t)arg13_pstr[i]);
    }
  }
  arg13 = &arg13_str;
  jenv->ReleaseStringChars(jarg13, arg13_pstr);
  
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8,(Unescaper const *)arg9,arg10,(std::string const &)*arg11,(std::string const &)*arg12,(std::string const &)*arg13);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jstring jarg12) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Unescaper *arg9 = (Unescaper *) 0 ;
  int arg10 ;
  std::string *arg11 = 0 ;
  std::string *arg12 = 0 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  arg9 = *(Unescaper **)&jarg9; 
  arg10 = (int)jarg10; 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg11_pstr = jenv->GetStringChars(jarg11, 0);
  if (!arg11_pstr) return 0;
  jsize arg11_len = jenv->GetStringLength(jarg11);
  std::string arg11_str;
  if (arg11_len) {
    arg11_str.reserve(arg11_len);
    for (jsize i = 0; i < arg11_len; ++i) {
      arg11_str.push_back((wchar_t)arg11_pstr[i]);
    }
  }
  arg11 = &arg11_str;
  jenv->ReleaseStringChars(jarg11, arg11_pstr);
  
  if(!jarg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg12_pstr = jenv->GetStringChars(jarg12, 0);
  if (!arg12_pstr) return 0;
  jsize arg12_len = jenv->GetStringLength(jarg12);
  std::string arg12_str;
  if (arg12_len) {
    arg12_str.reserve(arg12_len);
    for (jsize i = 0; i < arg12_len; ++i) {
      arg12_str.push_back((wchar_t)arg12_pstr[i]);
    }
  }
  arg12 = &arg12_str;
  jenv->ReleaseStringChars(jarg12, arg12_pstr);
  
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8,(Unescaper const *)arg9,arg10,(std::string const &)*arg11,(std::string const &)*arg12);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Unescaper *arg9 = (Unescaper *) 0 ;
  int arg10 ;
  std::string *arg11 = 0 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  arg9 = *(Unescaper **)&jarg9; 
  arg10 = (int)jarg10; 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const jchar *arg11_pstr = jenv->GetStringChars(jarg11, 0);
  if (!arg11_pstr) return 0;
  jsize arg11_len = jenv->GetStringLength(jarg11);
  std::string arg11_str;
  if (arg11_len) {
    arg11_str.reserve(arg11_len);
    for (jsize i = 0; i < arg11_len; ++i) {
      arg11_str.push_back((wchar_t)arg11_pstr[i]);
    }
  }
  arg11 = &arg11_str;
  jenv->ReleaseStringChars(jarg11, arg11_pstr);
  
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8,(Unescaper const *)arg9,arg10,(std::string const &)*arg11);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jint jarg10) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Unescaper *arg9 = (Unescaper *) 0 ;
  int arg10 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  arg9 = *(Unescaper **)&jarg9; 
  arg10 = (int)jarg10; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8,(Unescaper const *)arg9,arg10);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Unescaper *arg9 = (Unescaper *) 0 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  arg9 = *(Unescaper **)&jarg9; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8,(Unescaper const *)arg9);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  RequestValidator *arg8 = (RequestValidator *) 0 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  arg8 = *(RequestValidator **)&jarg8; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7,(RequestValidator const *)arg8);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  LoggingDelegate *arg7 = (LoggingDelegate *) 0 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(LoggingDelegate **)&jarg7; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6,(LoggingDelegate const *)arg7);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (Webserver *)new Webserver(arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (Webserver *)new Webserver(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1Webserver_1_1SWIG_117(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Webserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Webserver *)new Webserver();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Webserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1Webserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Webserver *arg1 = (Webserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Webserver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_libjavawebserver_1frameworkJNI_Webserver_1start_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  Webserver *arg1 = (Webserver *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Webserver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (bool)(arg1)->start(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libjavawebserver_1frameworkJNI_Webserver_1start_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Webserver *arg1 = (Webserver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Webserver **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->start();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libjavawebserver_1frameworkJNI_Webserver_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Webserver *arg1 = (Webserver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Webserver **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->stop();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libjavawebserver_1frameworkJNI_Webserver_1isRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Webserver *arg1 = (Webserver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Webserver **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isRunning();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_Webserver_1registerResource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  Webserver *arg1 = (Webserver *) 0 ;
  std::string *arg2 = 0 ;
  HttpResource *arg3 = (HttpResource *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Webserver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(HttpResource **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->registerResource((std::string const &)*arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_Webserver_1registerResource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Webserver *arg1 = (Webserver *) 0 ;
  std::string *arg2 = 0 ;
  HttpResource *arg3 = (HttpResource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Webserver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::string arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(HttpResource **)&jarg3; 
  {
    try {
      (arg1)->registerResource((std::string const &)*arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_Webserver_1sweetKill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Webserver *arg1 = (Webserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Webserver **)&jarg1; 
  {
    try {
      (arg1)->sweetKill();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_ModdedRequest_1pp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModdedRequest *arg1 = (ModdedRequest *) 0 ;
  MHD_PostProcessor *arg2 = (MHD_PostProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModdedRequest **)&jarg1; 
  arg2 = *(MHD_PostProcessor **)&jarg2; 
  if (arg1) (arg1)->pp = arg2;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_ModdedRequest_1pp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModdedRequest *arg1 = (ModdedRequest *) 0 ;
  MHD_PostProcessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModdedRequest **)&jarg1; 
  result = (MHD_PostProcessor *) ((arg1)->pp);
  *(MHD_PostProcessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_ModdedRequest_1completeUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ModdedRequest *arg1 = (ModdedRequest *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModdedRequest **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  if (arg1) (arg1)->completeUri = arg2;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_ModdedRequest_1completeUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModdedRequest *arg1 = (ModdedRequest *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModdedRequest **)&jarg1; 
  result = (std::string *) ((arg1)->completeUri);
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_ModdedRequest_1dhr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ModdedRequest *arg1 = (ModdedRequest *) 0 ;
  HttpRequest *arg2 = (HttpRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ModdedRequest **)&jarg1; 
  arg2 = *(HttpRequest **)&jarg2; 
  if (arg1) (arg1)->dhr = arg2;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_ModdedRequest_1dhr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ModdedRequest *arg1 = (ModdedRequest *) 0 ;
  HttpRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModdedRequest **)&jarg1; 
  result = (HttpRequest *) ((arg1)->dhr);
  *(HttpRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_ModdedRequest_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModdedRequest *arg1 = (ModdedRequest *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModdedRequest **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jboolean JNICALL Java_libjavawebserver_1frameworkJNI_ModdedRequest_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModdedRequest *arg1 = (ModdedRequest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModdedRequest **)&jarg1; 
  result = (bool) ((arg1)->second);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libjavawebserver_1frameworkJNI_new_1ModdedRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ModdedRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ModdedRequest *)new ModdedRequest();
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(ModdedRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_delete_1ModdedRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModdedRequest *arg1 = (ModdedRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModdedRequest **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_libjavawebserver_1frameworkJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[13] = {
    {
      "SwigDirector_HttpResource_render", "(LHttpResource;J)J" 
    },
    {
      "SwigDirector_HttpResource_render_404", "(LHttpResource;)J" 
    },
    {
      "SwigDirector_HttpResource_render_500", "(LHttpResource;)J" 
    },
    {
      "SwigDirector_HttpResource_render_405", "(LHttpResource;)J" 
    },
    {
      "SwigDirector_HttpResource_render_GET", "(LHttpResource;J)J" 
    },
    {
      "SwigDirector_HttpResource_render_POST", "(LHttpResource;J)J" 
    },
    {
      "SwigDirector_HttpResource_render_PUT", "(LHttpResource;J)J" 
    },
    {
      "SwigDirector_HttpResource_render_HEAD", "(LHttpResource;J)J" 
    },
    {
      "SwigDirector_HttpResource_render_DELETE", "(LHttpResource;J)J" 
    },
    {
      "SwigDirector_HttpResource_render_TRACE", "(LHttpResource;J)J" 
    },
    {
      "SwigDirector_HttpResource_render_OPTIONS", "(LHttpResource;J)J" 
    },
    {
      "SwigDirector_HttpResource_render_CONNECT", "(LHttpResource;J)J" 
    },
    {
      "SwigDirector_HttpResource_routeRequest", "(LHttpResource;J)J" 
    }
  };
  Swig::jclass_libjavawebserver_frameworkJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_libjavawebserver_frameworkJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

