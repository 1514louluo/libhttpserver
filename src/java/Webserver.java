/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class Webserver {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Webserver(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Webserver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libhttpserver_javaJNI.delete_Webserver(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6, boolean debug, boolean pedantic, String httpsMemKey, String httpsMemCert, String httpsMemTrust, String httpsPriorities, HttpUtils.CredType_T credType, String digestAuthRandom, int nonceNcSize) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_0(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6, debug, pedantic, httpsMemKey, httpsMemCert, httpsMemTrust, httpsPriorities, credType.swigValue(), digestAuthRandom, nonceNcSize), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6, boolean debug, boolean pedantic, String httpsMemKey, String httpsMemCert, String httpsMemTrust, String httpsPriorities, HttpUtils.CredType_T credType, String digestAuthRandom) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_1(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6, debug, pedantic, httpsMemKey, httpsMemCert, httpsMemTrust, httpsPriorities, credType.swigValue(), digestAuthRandom), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6, boolean debug, boolean pedantic, String httpsMemKey, String httpsMemCert, String httpsMemTrust, String httpsPriorities, HttpUtils.CredType_T credType) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_2(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6, debug, pedantic, httpsMemKey, httpsMemCert, httpsMemTrust, httpsPriorities, credType.swigValue()), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6, boolean debug, boolean pedantic, String httpsMemKey, String httpsMemCert, String httpsMemTrust, String httpsPriorities) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_3(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6, debug, pedantic, httpsMemKey, httpsMemCert, httpsMemTrust, httpsPriorities), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6, boolean debug, boolean pedantic, String httpsMemKey, String httpsMemCert, String httpsMemTrust) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_4(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6, debug, pedantic, httpsMemKey, httpsMemCert, httpsMemTrust), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6, boolean debug, boolean pedantic, String httpsMemKey, String httpsMemCert) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_5(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6, debug, pedantic, httpsMemKey, httpsMemCert), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6, boolean debug, boolean pedantic, String httpsMemKey) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_6(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6, debug, pedantic, httpsMemKey), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6, boolean debug, boolean pedantic) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_7(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6, debug, pedantic), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6, boolean debug) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_8(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6, debug), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl, boolean useIpv6) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_9(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl, useIpv6), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize, boolean useSsl) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_10(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize, useSsl), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket, int maxThreadStackSize) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_11(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket, maxThreadStackSize), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress, int bindSocket) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_12(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress), bindSocket), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper, SWIGTYPE_p_sockaddr bindAddress) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_13(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper, SWIGTYPE_p_sockaddr.getCPtr(bindAddress)), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator, Unescaper unescaper) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_14(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator, Unescaper.getCPtr(unescaper), unescaper), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate, RequestValidator validator) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_15(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate, RequestValidator.getCPtr(validator), validator), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit, LoggingDelegate logDelegate) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_16(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit, LoggingDelegate.getCPtr(logDelegate), logDelegate), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout, int perIPConnectionLimit) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_17(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout, perIPConnectionLimit), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit, int connectionTimeout) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_18(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit, connectionTimeout), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections, int memoryLimit) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_19(port, startMethod.swigValue(), maxThreads, maxConnections, memoryLimit), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads, int maxConnections) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_20(port, startMethod.swigValue(), maxThreads, maxConnections), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod, int maxThreads) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_21(port, startMethod.swigValue(), maxThreads), true);
  }

  public Webserver(int port, HttpUtils.StartMethod_T startMethod) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_22(port, startMethod.swigValue()), true);
  }

  public Webserver(int port) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_23(port), true);
  }

  public Webserver() {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_24(), true);
  }

  public Webserver(CreateWebserver params) {
    this(libhttpserver_javaJNI.new_Webserver__SWIG_25(CreateWebserver.getCPtr(params), params), true);
  }

  public boolean start(boolean blocking) {
    return libhttpserver_javaJNI.Webserver_start__SWIG_0(swigCPtr, this, blocking);
  }

  public boolean start() {
    return libhttpserver_javaJNI.Webserver_start__SWIG_1(swigCPtr, this);
  }

  public boolean stop() {
    return libhttpserver_javaJNI.Webserver_stop(swigCPtr, this);
  }

  public boolean isRunning() {
    return libhttpserver_javaJNI.Webserver_isRunning(swigCPtr, this);
  }

  public void registerResource(String resource, SWIGTYPE_p_httpserver__HttpResource http_resource, boolean family) {
    libhttpserver_javaJNI.Webserver_registerResource__SWIG_0(swigCPtr, this, resource, SWIGTYPE_p_httpserver__HttpResource.getCPtr(http_resource), family);
  }

  public void registerResource(String resource, SWIGTYPE_p_httpserver__HttpResource http_resource) {
    libhttpserver_javaJNI.Webserver_registerResource__SWIG_1(swigCPtr, this, resource, SWIGTYPE_p_httpserver__HttpResource.getCPtr(http_resource));
  }

  public void sweetKill() {
    libhttpserver_javaJNI.Webserver_sweetKill(swigCPtr, this);
  }

}
