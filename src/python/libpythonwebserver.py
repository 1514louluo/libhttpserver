# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libpythonwebserver', [dirname(__file__)])
        except ImportError:
            import _libpythonwebserver
            return _libpythonwebserver
        if fp is not None:
            try:
                _mod = imp.load_module('_libpythonwebserver', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libpythonwebserver = swig_import_helper()
    del swig_import_helper
else:
    import _libpythonwebserver
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libpythonwebserver.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _libpythonwebserver.SwigPyIterator_value(self)
    def incr(self, n = 1): return _libpythonwebserver.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _libpythonwebserver.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _libpythonwebserver.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _libpythonwebserver.SwigPyIterator_equal(self, *args)
    def copy(self): return _libpythonwebserver.SwigPyIterator_copy(self)
    def next(self): return _libpythonwebserver.SwigPyIterator_next(self)
    def __next__(self): return _libpythonwebserver.SwigPyIterator___next__(self)
    def previous(self): return _libpythonwebserver.SwigPyIterator_previous(self)
    def advance(self, *args): return _libpythonwebserver.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _libpythonwebserver.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _libpythonwebserver.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _libpythonwebserver.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _libpythonwebserver.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _libpythonwebserver.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _libpythonwebserver.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _libpythonwebserver.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _libpythonwebserver.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libpythonwebserver.StringVector___nonzero__(self)
    def __bool__(self): return _libpythonwebserver.StringVector___bool__(self)
    def __len__(self): return _libpythonwebserver.StringVector___len__(self)
    def pop(self): return _libpythonwebserver.StringVector_pop(self)
    def __getslice__(self, *args): return _libpythonwebserver.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _libpythonwebserver.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _libpythonwebserver.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _libpythonwebserver.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _libpythonwebserver.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _libpythonwebserver.StringVector___setitem__(self, *args)
    def append(self, *args): return _libpythonwebserver.StringVector_append(self, *args)
    def empty(self): return _libpythonwebserver.StringVector_empty(self)
    def size(self): return _libpythonwebserver.StringVector_size(self)
    def clear(self): return _libpythonwebserver.StringVector_clear(self)
    def swap(self, *args): return _libpythonwebserver.StringVector_swap(self, *args)
    def get_allocator(self): return _libpythonwebserver.StringVector_get_allocator(self)
    def begin(self): return _libpythonwebserver.StringVector_begin(self)
    def end(self): return _libpythonwebserver.StringVector_end(self)
    def rbegin(self): return _libpythonwebserver.StringVector_rbegin(self)
    def rend(self): return _libpythonwebserver.StringVector_rend(self)
    def pop_back(self): return _libpythonwebserver.StringVector_pop_back(self)
    def erase(self, *args): return _libpythonwebserver.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _libpythonwebserver.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libpythonwebserver.StringVector_push_back(self, *args)
    def front(self): return _libpythonwebserver.StringVector_front(self)
    def back(self): return _libpythonwebserver.StringVector_back(self)
    def assign(self, *args): return _libpythonwebserver.StringVector_assign(self, *args)
    def resize(self, *args): return _libpythonwebserver.StringVector_resize(self, *args)
    def insert(self, *args): return _libpythonwebserver.StringVector_insert(self, *args)
    def reserve(self, *args): return _libpythonwebserver.StringVector_reserve(self, *args)
    def capacity(self): return _libpythonwebserver.StringVector_capacity(self)
    __swig_destroy__ = _libpythonwebserver.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _libpythonwebserver.StringVector_swigregister
StringVector_swigregister(StringVector)

class HttpUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HttpUtils, name)
    __repr__ = _swig_repr
    NONE = _libpythonwebserver.HttpUtils_NONE
    CERTIFICATE = _libpythonwebserver.HttpUtils_CERTIFICATE
    ANON = _libpythonwebserver.HttpUtils_ANON
    SRP = _libpythonwebserver.HttpUtils_SRP
    PSK = _libpythonwebserver.HttpUtils_PSK
    IA = _libpythonwebserver.HttpUtils_IA
    __swig_getmethods__["tokenizeUrl"] = lambda x: _libpythonwebserver.HttpUtils_tokenizeUrl
    if _newclass:tokenizeUrl = staticmethod(_libpythonwebserver.HttpUtils_tokenizeUrl)
    __swig_getmethods__["standardizeUrl"] = lambda x: _libpythonwebserver.HttpUtils_standardizeUrl
    if _newclass:standardizeUrl = staticmethod(_libpythonwebserver.HttpUtils_standardizeUrl)
    def __init__(self): 
        this = _libpythonwebserver.new_HttpUtils()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libpythonwebserver.delete_HttpUtils
    __del__ = lambda self : None;
HttpUtils_swigregister = _libpythonwebserver.HttpUtils_swigregister
HttpUtils_swigregister(HttpUtils)
cvar = _libpythonwebserver.cvar
HttpUtils.http_continue = _libpythonwebserver.cvar.HttpUtils_http_continue
HttpUtils.http_switching_protocol = _libpythonwebserver.cvar.HttpUtils_http_switching_protocol
HttpUtils.http_processing = _libpythonwebserver.cvar.HttpUtils_http_processing
HttpUtils.http_ok = _libpythonwebserver.cvar.HttpUtils_http_ok
HttpUtils.http_created = _libpythonwebserver.cvar.HttpUtils_http_created
HttpUtils.http_accepted = _libpythonwebserver.cvar.HttpUtils_http_accepted
HttpUtils.http_non_authoritative_information = _libpythonwebserver.cvar.HttpUtils_http_non_authoritative_information
HttpUtils.http_no_content = _libpythonwebserver.cvar.HttpUtils_http_no_content
HttpUtils.http_reset_content = _libpythonwebserver.cvar.HttpUtils_http_reset_content
HttpUtils.http_partial_content = _libpythonwebserver.cvar.HttpUtils_http_partial_content
HttpUtils.http_multi_status = _libpythonwebserver.cvar.HttpUtils_http_multi_status
HttpUtils.http_multiple_choices = _libpythonwebserver.cvar.HttpUtils_http_multiple_choices
HttpUtils.http_moved_permanently = _libpythonwebserver.cvar.HttpUtils_http_moved_permanently
HttpUtils.http_found = _libpythonwebserver.cvar.HttpUtils_http_found
HttpUtils.http_see_other = _libpythonwebserver.cvar.HttpUtils_http_see_other
HttpUtils.http_not_modified = _libpythonwebserver.cvar.HttpUtils_http_not_modified
HttpUtils.http_use_proxy = _libpythonwebserver.cvar.HttpUtils_http_use_proxy
HttpUtils.http_switch_proxy = _libpythonwebserver.cvar.HttpUtils_http_switch_proxy
HttpUtils.http_temporary_redirect = _libpythonwebserver.cvar.HttpUtils_http_temporary_redirect
HttpUtils.http_bad_request = _libpythonwebserver.cvar.HttpUtils_http_bad_request
HttpUtils.http_unauthorized = _libpythonwebserver.cvar.HttpUtils_http_unauthorized
HttpUtils.http_payment_required = _libpythonwebserver.cvar.HttpUtils_http_payment_required
HttpUtils.http_forbidden = _libpythonwebserver.cvar.HttpUtils_http_forbidden
HttpUtils.http_not_found = _libpythonwebserver.cvar.HttpUtils_http_not_found
HttpUtils.http_method_not_allowed = _libpythonwebserver.cvar.HttpUtils_http_method_not_allowed
HttpUtils.http_method_not_acceptable = _libpythonwebserver.cvar.HttpUtils_http_method_not_acceptable
HttpUtils.http_proxy_authentication_required = _libpythonwebserver.cvar.HttpUtils_http_proxy_authentication_required
HttpUtils.http_request_timeout = _libpythonwebserver.cvar.HttpUtils_http_request_timeout
HttpUtils.http_conflict = _libpythonwebserver.cvar.HttpUtils_http_conflict
HttpUtils.http_gone = _libpythonwebserver.cvar.HttpUtils_http_gone
HttpUtils.http_length_required = _libpythonwebserver.cvar.HttpUtils_http_length_required
HttpUtils.http_precondition_failed = _libpythonwebserver.cvar.HttpUtils_http_precondition_failed
HttpUtils.http_request_entity_too_large = _libpythonwebserver.cvar.HttpUtils_http_request_entity_too_large
HttpUtils.http_request_uri_too_long = _libpythonwebserver.cvar.HttpUtils_http_request_uri_too_long
HttpUtils.http_unsupported_media_type = _libpythonwebserver.cvar.HttpUtils_http_unsupported_media_type
HttpUtils.http_requested_range_not_satisfiable = _libpythonwebserver.cvar.HttpUtils_http_requested_range_not_satisfiable
HttpUtils.http_expectation_failed = _libpythonwebserver.cvar.HttpUtils_http_expectation_failed
HttpUtils.http_unprocessable_entity = _libpythonwebserver.cvar.HttpUtils_http_unprocessable_entity
HttpUtils.http_locked = _libpythonwebserver.cvar.HttpUtils_http_locked
HttpUtils.http_failed_dependency = _libpythonwebserver.cvar.HttpUtils_http_failed_dependency
HttpUtils.http_unordered_collection = _libpythonwebserver.cvar.HttpUtils_http_unordered_collection
HttpUtils.http_upgrade_required = _libpythonwebserver.cvar.HttpUtils_http_upgrade_required
HttpUtils.http_retry_with = _libpythonwebserver.cvar.HttpUtils_http_retry_with
HttpUtils.http_internal_server_error = _libpythonwebserver.cvar.HttpUtils_http_internal_server_error
HttpUtils.http_not_implemented = _libpythonwebserver.cvar.HttpUtils_http_not_implemented
HttpUtils.http_bad_gateway = _libpythonwebserver.cvar.HttpUtils_http_bad_gateway
HttpUtils.http_service_unavailable = _libpythonwebserver.cvar.HttpUtils_http_service_unavailable
HttpUtils.http_gateway_timeout = _libpythonwebserver.cvar.HttpUtils_http_gateway_timeout
HttpUtils.http_version_not_supported = _libpythonwebserver.cvar.HttpUtils_http_version_not_supported
HttpUtils.http_variant_also_negotiated = _libpythonwebserver.cvar.HttpUtils_http_variant_also_negotiated
HttpUtils.http_insufficient_storage = _libpythonwebserver.cvar.HttpUtils_http_insufficient_storage
HttpUtils.http_bandwidth_limit_exceeded = _libpythonwebserver.cvar.HttpUtils_http_bandwidth_limit_exceeded
HttpUtils.http_not_extended = _libpythonwebserver.cvar.HttpUtils_http_not_extended
HttpUtils.http_header_accept = _libpythonwebserver.cvar.HttpUtils_http_header_accept
HttpUtils.http_header_accept_charset = _libpythonwebserver.cvar.HttpUtils_http_header_accept_charset
HttpUtils.http_header_accept_encoding = _libpythonwebserver.cvar.HttpUtils_http_header_accept_encoding
HttpUtils.http_header_accept_language = _libpythonwebserver.cvar.HttpUtils_http_header_accept_language
HttpUtils.http_header_accept_ranges = _libpythonwebserver.cvar.HttpUtils_http_header_accept_ranges
HttpUtils.http_header_age = _libpythonwebserver.cvar.HttpUtils_http_header_age
HttpUtils.http_header_allow = _libpythonwebserver.cvar.HttpUtils_http_header_allow
HttpUtils.http_header_authorization = _libpythonwebserver.cvar.HttpUtils_http_header_authorization
HttpUtils.http_header_cache_control = _libpythonwebserver.cvar.HttpUtils_http_header_cache_control
HttpUtils.http_header_connection = _libpythonwebserver.cvar.HttpUtils_http_header_connection
HttpUtils.http_header_content_encoding = _libpythonwebserver.cvar.HttpUtils_http_header_content_encoding
HttpUtils.http_header_content_language = _libpythonwebserver.cvar.HttpUtils_http_header_content_language
HttpUtils.http_header_content_length = _libpythonwebserver.cvar.HttpUtils_http_header_content_length
HttpUtils.http_header_content_location = _libpythonwebserver.cvar.HttpUtils_http_header_content_location
HttpUtils.http_header_content_md5 = _libpythonwebserver.cvar.HttpUtils_http_header_content_md5
HttpUtils.http_header_content_range = _libpythonwebserver.cvar.HttpUtils_http_header_content_range
HttpUtils.http_header_content_type = _libpythonwebserver.cvar.HttpUtils_http_header_content_type
HttpUtils.http_header_date = _libpythonwebserver.cvar.HttpUtils_http_header_date
HttpUtils.http_header_etag = _libpythonwebserver.cvar.HttpUtils_http_header_etag
HttpUtils.http_header_expect = _libpythonwebserver.cvar.HttpUtils_http_header_expect
HttpUtils.http_header_expires = _libpythonwebserver.cvar.HttpUtils_http_header_expires
HttpUtils.http_header_from = _libpythonwebserver.cvar.HttpUtils_http_header_from
HttpUtils.http_header_host = _libpythonwebserver.cvar.HttpUtils_http_header_host
HttpUtils.http_header_if_match = _libpythonwebserver.cvar.HttpUtils_http_header_if_match
HttpUtils.http_header_if_modified_since = _libpythonwebserver.cvar.HttpUtils_http_header_if_modified_since
HttpUtils.http_header_if_none_match = _libpythonwebserver.cvar.HttpUtils_http_header_if_none_match
HttpUtils.http_header_if_range = _libpythonwebserver.cvar.HttpUtils_http_header_if_range
HttpUtils.http_header_if_unmodified_since = _libpythonwebserver.cvar.HttpUtils_http_header_if_unmodified_since
HttpUtils.http_header_last_modified = _libpythonwebserver.cvar.HttpUtils_http_header_last_modified
HttpUtils.http_header_location = _libpythonwebserver.cvar.HttpUtils_http_header_location
HttpUtils.http_header_max_forwards = _libpythonwebserver.cvar.HttpUtils_http_header_max_forwards
HttpUtils.http_header_pragma = _libpythonwebserver.cvar.HttpUtils_http_header_pragma
HttpUtils.http_header_proxy_authenticate = _libpythonwebserver.cvar.HttpUtils_http_header_proxy_authenticate
HttpUtils.http_header_proxy_authentication = _libpythonwebserver.cvar.HttpUtils_http_header_proxy_authentication
HttpUtils.http_header_range = _libpythonwebserver.cvar.HttpUtils_http_header_range
HttpUtils.http_header_referer = _libpythonwebserver.cvar.HttpUtils_http_header_referer
HttpUtils.http_header_retry_after = _libpythonwebserver.cvar.HttpUtils_http_header_retry_after
HttpUtils.http_header_server = _libpythonwebserver.cvar.HttpUtils_http_header_server
HttpUtils.http_header_te = _libpythonwebserver.cvar.HttpUtils_http_header_te
HttpUtils.http_header_trailer = _libpythonwebserver.cvar.HttpUtils_http_header_trailer
HttpUtils.http_header_transfer_encoding = _libpythonwebserver.cvar.HttpUtils_http_header_transfer_encoding
HttpUtils.http_header_upgrade = _libpythonwebserver.cvar.HttpUtils_http_header_upgrade
HttpUtils.http_header_user_agent = _libpythonwebserver.cvar.HttpUtils_http_header_user_agent
HttpUtils.http_header_vary = _libpythonwebserver.cvar.HttpUtils_http_header_vary
HttpUtils.http_header_via = _libpythonwebserver.cvar.HttpUtils_http_header_via
HttpUtils.http_header_warning = _libpythonwebserver.cvar.HttpUtils_http_header_warning
HttpUtils.http_header_www_authenticate = _libpythonwebserver.cvar.HttpUtils_http_header_www_authenticate
HttpUtils.http_version_1_0 = _libpythonwebserver.cvar.HttpUtils_http_version_1_0
HttpUtils.http_version_1_1 = _libpythonwebserver.cvar.HttpUtils_http_version_1_1
HttpUtils.http_method_connect = _libpythonwebserver.cvar.HttpUtils_http_method_connect
HttpUtils.http_method_delete = _libpythonwebserver.cvar.HttpUtils_http_method_delete
HttpUtils.http_method_head = _libpythonwebserver.cvar.HttpUtils_http_method_head
HttpUtils.http_method_get = _libpythonwebserver.cvar.HttpUtils_http_method_get
HttpUtils.http_method_options = _libpythonwebserver.cvar.HttpUtils_http_method_options
HttpUtils.http_method_post = _libpythonwebserver.cvar.HttpUtils_http_method_post
HttpUtils.http_method_put = _libpythonwebserver.cvar.HttpUtils_http_method_put
HttpUtils.http_method_trace = _libpythonwebserver.cvar.HttpUtils_http_method_trace
HttpUtils.http_post_encoding_form_urlencoded = _libpythonwebserver.cvar.HttpUtils_http_post_encoding_form_urlencoded
HttpUtils.http_post_encoding_multipart_formdata = _libpythonwebserver.cvar.HttpUtils_http_post_encoding_multipart_formdata

def HttpUtils_tokenizeUrl(*args):
  return _libpythonwebserver.HttpUtils_tokenizeUrl(*args)
HttpUtils_tokenizeUrl = _libpythonwebserver.HttpUtils_tokenizeUrl

def HttpUtils_standardizeUrl(*args):
  return _libpythonwebserver.HttpUtils_standardizeUrl(*args)
HttpUtils_standardizeUrl = _libpythonwebserver.HttpUtils_standardizeUrl

class ArgComparator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgComparator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArgComparator, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _libpythonwebserver.ArgComparator___call__(self, *args)
    def __init__(self): 
        this = _libpythonwebserver.new_ArgComparator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libpythonwebserver.delete_ArgComparator
    __del__ = lambda self : None;
ArgComparator_swigregister = _libpythonwebserver.ArgComparator_swigregister
ArgComparator_swigregister(ArgComparator)

NOT_FOUND_ERROR = _libpythonwebserver.NOT_FOUND_ERROR
METHOD_ERROR = _libpythonwebserver.METHOD_ERROR
NOT_METHOD_ERROR = _libpythonwebserver.NOT_METHOD_ERROR
GENERIC_ERROR = _libpythonwebserver.GENERIC_ERROR
DEFAULT_DROP_WS_PORT = _libpythonwebserver.DEFAULT_DROP_WS_PORT
DEFAULT_DROP_WS_TIMEOUT = _libpythonwebserver.DEFAULT_DROP_WS_TIMEOUT
class HttpEndpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpEndpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HttpEndpoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libpythonwebserver.new_HttpEndpoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(self, *args): return _libpythonwebserver.HttpEndpoint___lt__(self, *args)
    def match(self, *args): return _libpythonwebserver.HttpEndpoint_match(self, *args)
    def get_url_pars(self): return _libpythonwebserver.HttpEndpoint_get_url_pars(self)
    def get_url_pieces(self): return _libpythonwebserver.HttpEndpoint_get_url_pieces(self)
    def get_chunk_positions(self): return _libpythonwebserver.HttpEndpoint_get_chunk_positions(self)
    __swig_destroy__ = _libpythonwebserver.delete_HttpEndpoint
    __del__ = lambda self : None;
HttpEndpoint_swigregister = _libpythonwebserver.HttpEndpoint_swigregister
HttpEndpoint_swigregister(HttpEndpoint)

class HttpRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HttpRequest, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libpythonwebserver.new_HttpRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    def getUser(self): return _libpythonwebserver.HttpRequest_getUser(self)
    def getPass(self): return _libpythonwebserver.HttpRequest_getPass(self)
    def getPath(self): return _libpythonwebserver.HttpRequest_getPath(self)
    def getPathPieces(self): return _libpythonwebserver.HttpRequest_getPathPieces(self)
    def getMethod(self): return _libpythonwebserver.HttpRequest_getMethod(self)
    def getHeaders(self): return _libpythonwebserver.HttpRequest_getHeaders(self)
    def getArgs(self): return _libpythonwebserver.HttpRequest_getArgs(self)
    def getHeader(self, *args): return _libpythonwebserver.HttpRequest_getHeader(self, *args)
    def getArg(self, *args): return _libpythonwebserver.HttpRequest_getArg(self, *args)
    def getContent(self): return _libpythonwebserver.HttpRequest_getContent(self)
    def setHeader(self, *args): return _libpythonwebserver.HttpRequest_setHeader(self, *args)
    def setArg(self, *args): return _libpythonwebserver.HttpRequest_setArg(self, *args)
    def setContent(self, *args): return _libpythonwebserver.HttpRequest_setContent(self, *args)
    def growContent(self, *args): return _libpythonwebserver.HttpRequest_growContent(self, *args)
    def setPath(self, *args): return _libpythonwebserver.HttpRequest_setPath(self, *args)
    def setMethod(self, *args): return _libpythonwebserver.HttpRequest_setMethod(self, *args)
    def removeHeader(self, *args): return _libpythonwebserver.HttpRequest_removeHeader(self, *args)
    def setHeaders(self, *args): return _libpythonwebserver.HttpRequest_setHeaders(self, *args)
    def setArgs(self, *args): return _libpythonwebserver.HttpRequest_setArgs(self, *args)
    def setUser(self, *args): return _libpythonwebserver.HttpRequest_setUser(self, *args)
    def setPass(self, *args): return _libpythonwebserver.HttpRequest_setPass(self, *args)
    __swig_destroy__ = _libpythonwebserver.delete_HttpRequest
    __del__ = lambda self : None;
HttpRequest_swigregister = _libpythonwebserver.HttpRequest_swigregister
HttpRequest_swigregister(HttpRequest)

class HttpResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HttpResponse, name)
    __repr__ = _swig_repr
    STRING_CONTENT = _libpythonwebserver.HttpResponse_STRING_CONTENT
    FILE_CONTENT = _libpythonwebserver.HttpResponse_FILE_CONTENT
    def __init__(self, *args): 
        this = _libpythonwebserver.new_HttpResponse(*args)
        try: self.this.append(this)
        except: self.this = this
    def getContent(self): return _libpythonwebserver.HttpResponse_getContent(self)
    def setContent(self, *args): return _libpythonwebserver.HttpResponse_setContent(self, *args)
    def getHeader(self, *args): return _libpythonwebserver.HttpResponse_getHeader(self, *args)
    def getFooter(self, *args): return _libpythonwebserver.HttpResponse_getFooter(self, *args)
    def setHeader(self, *args): return _libpythonwebserver.HttpResponse_setHeader(self, *args)
    def setFooter(self, *args): return _libpythonwebserver.HttpResponse_setFooter(self, *args)
    def setContentType(self, *args): return _libpythonwebserver.HttpResponse_setContentType(self, *args)
    def removeHeader(self, *args): return _libpythonwebserver.HttpResponse_removeHeader(self, *args)
    def getHeaders(self): return _libpythonwebserver.HttpResponse_getHeaders(self)
    def getFooters(self): return _libpythonwebserver.HttpResponse_getFooters(self)
    def setHeaders(self, *args): return _libpythonwebserver.HttpResponse_setHeaders(self, *args)
    def setFooters(self, *args): return _libpythonwebserver.HttpResponse_setFooters(self, *args)
    def setResponseCode(self, *args): return _libpythonwebserver.HttpResponse_setResponseCode(self, *args)
    def getResponseCode(self): return _libpythonwebserver.HttpResponse_getResponseCode(self)
    __swig_destroy__ = _libpythonwebserver.delete_HttpResponse
    __del__ = lambda self : None;
HttpResponse_swigregister = _libpythonwebserver.HttpResponse_swigregister
HttpResponse_swigregister(HttpResponse)

class HttpResource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpResource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HttpResource, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == HttpResource:
            _self = None
        else:
            _self = self
        this = _libpythonwebserver.new_HttpResource(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libpythonwebserver.delete_HttpResource
    __del__ = lambda self : None;
    def render(self, *args): return _libpythonwebserver.HttpResource_render(self, *args)
    def render_404(self): return _libpythonwebserver.HttpResource_render_404(self)
    def render_500(self): return _libpythonwebserver.HttpResource_render_500(self)
    def render_405(self): return _libpythonwebserver.HttpResource_render_405(self)
    def render_GET(self, *args): return _libpythonwebserver.HttpResource_render_GET(self, *args)
    def render_POST(self, *args): return _libpythonwebserver.HttpResource_render_POST(self, *args)
    def render_PUT(self, *args): return _libpythonwebserver.HttpResource_render_PUT(self, *args)
    def render_HEAD(self, *args): return _libpythonwebserver.HttpResource_render_HEAD(self, *args)
    def render_DELETE(self, *args): return _libpythonwebserver.HttpResource_render_DELETE(self, *args)
    def render_TRACE(self, *args): return _libpythonwebserver.HttpResource_render_TRACE(self, *args)
    def render_OPTIONS(self, *args): return _libpythonwebserver.HttpResource_render_OPTIONS(self, *args)
    def render_CONNECT(self, *args): return _libpythonwebserver.HttpResource_render_CONNECT(self, *args)
    def routeRequest(self, *args): return _libpythonwebserver.HttpResource_routeRequest(self, *args)
    def setAllowing(self, *args): return _libpythonwebserver.HttpResource_setAllowing(self, *args)
    def allowAll(self): return _libpythonwebserver.HttpResource_allowAll(self)
    def disallowAll(self): return _libpythonwebserver.HttpResource_disallowAll(self)
    def isAllowed(self, *args): return _libpythonwebserver.HttpResource_isAllowed(self, *args)
    def __disown__(self):
        self.this.disown()
        _libpythonwebserver.disown_HttpResource(self)
        return weakref_proxy(self)
HttpResource_swigregister = _libpythonwebserver.HttpResource_swigregister
HttpResource_swigregister(HttpResource)

class LoggingDelegate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoggingDelegate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoggingDelegate, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libpythonwebserver.new_LoggingDelegate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libpythonwebserver.delete_LoggingDelegate
    __del__ = lambda self : None;
    def log_access(self, *args): return _libpythonwebserver.LoggingDelegate_log_access(self, *args)
    def log_error(self, *args): return _libpythonwebserver.LoggingDelegate_log_error(self, *args)
LoggingDelegate_swigregister = _libpythonwebserver.LoggingDelegate_swigregister
LoggingDelegate_swigregister(LoggingDelegate)

class RequestValidator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RequestValidator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RequestValidator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libpythonwebserver.new_RequestValidator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libpythonwebserver.delete_RequestValidator
    __del__ = lambda self : None;
    def validate(self, *args): return _libpythonwebserver.RequestValidator_validate(self, *args)
RequestValidator_swigregister = _libpythonwebserver.RequestValidator_swigregister
RequestValidator_swigregister(RequestValidator)

class Unescaper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unescaper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Unescaper, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libpythonwebserver.new_Unescaper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libpythonwebserver.delete_Unescaper
    __del__ = lambda self : None;
    def unescape(self, *args): return _libpythonwebserver.Unescaper_unescape(self, *args)
Unescaper_swigregister = _libpythonwebserver.Unescaper_swigregister
Unescaper_swigregister(Unescaper)

class Webserver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Webserver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Webserver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libpythonwebserver.new_Webserver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libpythonwebserver.delete_Webserver
    __del__ = lambda self : None;
    def start(self, blocking = False): return _libpythonwebserver.Webserver_start(self, blocking)
    def stop(self): return _libpythonwebserver.Webserver_stop(self)
    def isRunning(self): return _libpythonwebserver.Webserver_isRunning(self)
    def registerResource(self, *args): return _libpythonwebserver.Webserver_registerResource(self, *args)
    def sweetKill(self): return _libpythonwebserver.Webserver_sweetKill(self)
Webserver_swigregister = _libpythonwebserver.Webserver_swigregister
Webserver_swigregister(Webserver)

class ModdedRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModdedRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModdedRequest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pp"] = _libpythonwebserver.ModdedRequest_pp_set
    __swig_getmethods__["pp"] = _libpythonwebserver.ModdedRequest_pp_get
    if _newclass:pp = _swig_property(_libpythonwebserver.ModdedRequest_pp_get, _libpythonwebserver.ModdedRequest_pp_set)
    __swig_setmethods__["completeUri"] = _libpythonwebserver.ModdedRequest_completeUri_set
    __swig_getmethods__["completeUri"] = _libpythonwebserver.ModdedRequest_completeUri_get
    if _newclass:completeUri = _swig_property(_libpythonwebserver.ModdedRequest_completeUri_get, _libpythonwebserver.ModdedRequest_completeUri_set)
    __swig_setmethods__["dhr"] = _libpythonwebserver.ModdedRequest_dhr_set
    __swig_getmethods__["dhr"] = _libpythonwebserver.ModdedRequest_dhr_get
    if _newclass:dhr = _swig_property(_libpythonwebserver.ModdedRequest_dhr_get, _libpythonwebserver.ModdedRequest_dhr_set)
    __swig_setmethods__["second"] = _libpythonwebserver.ModdedRequest_second_set
    __swig_getmethods__["second"] = _libpythonwebserver.ModdedRequest_second_get
    if _newclass:second = _swig_property(_libpythonwebserver.ModdedRequest_second_get, _libpythonwebserver.ModdedRequest_second_set)
    def __init__(self): 
        this = _libpythonwebserver.new_ModdedRequest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libpythonwebserver.delete_ModdedRequest
    __del__ = lambda self : None;
ModdedRequest_swigregister = _libpythonwebserver.ModdedRequest_swigregister
ModdedRequest_swigregister(ModdedRequest)

# This file is compatible with both classic and new-style classes.


